{"version":3,"sources":["api.js","components/fight/Transcript.jsx","components/fight/Arena.jsx","components/fight/Fight.jsx","components/Home.jsx","hooks/auth.js","components/workshop/edit/ConfirmModal.jsx","components/NavMenu.jsx","components/workshop/create/Finalize.jsx","components/workshop/create/LineInput.jsx","components/workshop/create/Greetings.jsx","hooks/debounce.js","components/workshop/create/Name.jsx","components/workshop/create/Questions.jsx","components/workshop/create/Responses.jsx","components/workshop/Create.jsx","components/workshop/Edit.jsx","components/workshop/Entrance.jsx","components/workshop/edit/LineTable.jsx","components/workshop/edit/BotDetail.jsx","components/auth/Login.jsx","components/auth/Register.jsx","Router.jsx","components/workshop/Workshop.jsx","theme.js","App.jsx","index.js"],"names":["API","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","moods","useStyles","makeStyles","theme","container","flexGrow","maxHeight","line","display","name","fontWeight","Transcript","transcript","scrollContainerRef","classes","scrollRef","useRef","useEffect","el","current","scrollHeight","clientHeight","scrollTop","scrollIntoView","behaviour","length","Box","className","List","ListItem","ListItemText","primary","map","msg","index","Fragment","ref","text","mood","Divider","height","border","sideBar","borderRight","alignContent","select","padding","borderBottom","addButton","marginTop","notStartedContainer","textAlign","justifyContent","notStartedMsg","fontSize","transcriptContainer","overflow","initialState","ws","WebSocket","document","location","host","active","roomBots","remainingBots","reducer","state","action","type","bots","addedBot","find","bot","id","newRemaining","filter","message","Error","Arena","useState","selectedBot","setSelectedBot","useReducer","dispatch","a","get","response","data","getBots","onmessage","event","JSON","parse","startRoom","send","stringify","Grid","component","Paper","elevation","item","xs","FormControl","variant","fullWidth","InputLabel","Select","label","onChange","target","value","MenuItem","Button","onClick","payload","color","ListSubheader","style","paddingTop","title","fightZone","flex","flexDirection","marginBottom","feature","button","margin","authContext","createContext","ProvideAuth","children","auth","user","setUser","fetchData","console","register","loginData","post","login","username","password","setItem","logout","removeItem","useProvideAuth","Provider","useAuth","useContext","confirmButton","backgroundColor","props","hoverColor","ConfirmModal","onConfirm","prompt","confirmText","render","open","setOpen","handleClose","Dialog","onClose","DialogTitle","DialogActions","autoFocus","root","appBar","zIndex","drawer","palette","dark","dividerColor","contrastText","appBarLeft","width","flexShrink","appBarRight","paddingRight","loginLink","textDecoration","secondary","main","logoutContainer","logoutButton","drawerPaper","drawerContainer","activeNav","content","layout","nav","appBarHeight","overflowX","NavMenu","routes","useTheme","history","useHistory","CssBaseline","AppBar","position","Toolbar","disableGutters","headerContainer","Typography","align","noWrap","alignSelf","IconButton","ExitToApp","push","NavLink","to","Drawer","paper","Object","values","route","icon","exact","activeClassName","path","ListItemIcon","Finalize","spacing","LineInput","msgs","errorMessages","updateLine","TextField","helperText","join","Greetings","updateGreetings","updateHandler","setValidator","titleStyle","greeting","setGreeting","setError","errorMsgs","setErrorMsgs","validate","useCallback","validGreeting","undefined","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","valid","borderColor","borderWidth","validName","Name","updateName","setName","checkedName","setCheckedName","debouncedName","currentName","checkBotName","badLength","Questions","updateQuestions","question1","setQuestion1","question2","setQuestion2","error1","setError1","error2","setError2","errorMsgs1","setErrorMsgs1","errorMsgs2","setErrorMsgs2","errorMessages1","errorMessages2","validQuestion1","validQuestion2","Responses","updateResponses","response1","setResponse1","response2","setResponse2","validResponse1","validResponse2","activeStep","success","light","stepContainer","stepContent","stepButton","botsContainer","noBots","tableContainer","selectBot","cursor","delete","loadingContainer","loading","directionText","row","overflowWrap","LineTable","botID","lineType","lines","min","refresh","setLine","addLine","deleteLine","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","hover","substr","validText","size","tabContainer","generalContainer","generalSave","errorList","TabPanel","other","role","hidden","paddingBottom","formContainer","bottomText","link","info","failed","formRow","RouterLink","HomeIcon","useRouteMatch","i","PrivateRoute","Build","setActiveStep","Set","completed","setCompleted","allStepsCompleted","steps","handleStep","step","has","handleComplete","newCompleted","add","isStepComplete","setBotID","greetings","setGreetings","questions","setQuestions","responses","setResponses","createBot","log","Stepper","alternativeLabel","nonLinear","Step","StepButton","disabled","direction","React","createElement","validator","setLoading","setBots","deleteBot","CircularProgress","useParams","tab","setTab","setBot","setErrorMessages","nameError","setNameError","validGreetings","validQuestions","validResponses","updateBot","getBotData","put","showValidName","Tabs","newValue","Tab","general","subheader","Forum","useLocation","setState","errors","setErrors","setFailed","newErrors","tryLogin","from","pathname","replace","Person","Lock","noAuth","firstName","lastName","checkedUsername","setCheckedUsername","debouncedUsername","checkUsername","tryRegister","App","NoAuthRoute","rest","createMuiTheme","brown","amber","ThemeProvider","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.792a53ac.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n    baseURL: \"/api\",\n});\n\n// Add stored token to header for each request\nAPI.interceptors.request.use(config => {\n    const token = localStorage.getItem(\"jwt_token\");\n    config.headers.Authorization = `Bearer ${token}`;\n    return config;\n},\n    error => Promise.reject(error)\n);\n\n\nconst moods = [\n    \"Happy\",\n    \"Angry\",\n    \"Sad\"\n];\n\nexport { moods };\n\n\nexport default API;","import { Box, Divider, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport { moods } from 'api';\nimport React, { useEffect, useRef } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        maxHeight: \"100%\",\n    },\n    line: {\n        display: \"flex\"\n    },\n    name: {\n        fontWeight: 700\n    }\n}));\n\nexport default function Transcript({ transcript, scrollContainerRef }) {\n    const classes = useStyles();\n    const scrollRef = useRef(null);\n\n\n    // Autoscroll\n    useEffect(() => {\n        const el = scrollContainerRef.current;\n        if (!scrollRef.current)\n            return;\n        if ((el.scrollHeight - el.clientHeight) - el.scrollTop < 100) {\n            scrollRef.current.scrollIntoView({ behaviour: \"smooth\" });\n        }\n    }, [transcript.length, scrollContainerRef]);\n\n    return (\n        <Box className={classes.container}>\n            <List>\n                {transcript.length === 0 ?\n                    <ListItem>\n                        <ListItemText primary={\"Waiting for messages...\"} />\n                    </ListItem>\n                    :\n                    transcript.map((msg, index) => (\n                        <React.Fragment key={index}>\n                            <ListItem ref={index === transcript.length - 1 ? scrollRef : null}>\n                                <Box className={\"MuiListItemText-root MuiListItemText-multiline\"}>\n                                    <p className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\"}><strong>{msg.name}</strong>: {msg.line.text}</p>\n                                    <p className={\"MuiTypography-root MuiListItemText-secondary MuiTypography-body2 MuiTypography-colorTextSecondary MuiTypography-displayBlock\"}>{moods[msg.line.mood]}</p>\n                                </Box>\n                            </ListItem>\n                            {index !== transcript.length - 1 && <Divider />}\n                        </React.Fragment>\n                    ))\n                }\n            </List>\n        </Box>\n    );\n}\n","import { Button, FormControl, Grid, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Paper, Select } from '@material-ui/core';\nimport API from 'api';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\nimport Transcript from './Transcript';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        height: \"100%\",\n        border: \"1px solid #bbb\"\n    },\n    sideBar: {\n        borderRight: \"1px solid grey\",\n        alignContent: \"flex-start\"\n    },\n    select: {\n        padding: 10,\n        borderBottom: \"1px solid grey\",\n    },\n    addButton: {\n        marginTop: 5\n    },\n    notStartedContainer: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    notStartedMsg: {\n        textAlign: \"center\",\n        fontSize: 20\n    },\n    transcriptContainer: {\n        overflow: 'auto',\n        maxHeight: \"100%\"\n    }\n}));\n\nconst initialState = {\n    ws: new WebSocket(process.env.NODE_ENV === 'development' ? \"ws://localhost:8080/api/rooms\" : `wss://${document.location.host}/api/rooms`),\n    active: false,\n    roomBots: [],\n    transcript: [],\n    remainingBots: []\n};\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"INIT\":\n            return { ...state, remainingBots: action.bots };\n        case \"START_ROOM\":\n            return { ...state, active: true };\n        case \"ADD_BOT\":\n            const addedBot = state.remainingBots.find(bot => bot.id === action.id);\n            const newRemaining = state.remainingBots.filter(bot => bot.id !== action.id);\n            return { ...state, roomBots: [...state.roomBots, addedBot], remainingBots: newRemaining };\n        case \"NEW_MESSAGE\":\n            return { ...state, transcript: [...state.transcript, action.message] };\n        default:\n            throw new Error(\"unrecognized action type\");\n    }\n}\n\nexport default function Arena() {\n    const classes = useStyles();\n    const scrollContainerRef = useRef(null);\n\n    const [selectedBot, setSelectedBot] = useState(\"\");\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    // Initial load of bots\n    useEffect(() => {\n        // Fetch bots\n        const getBots = async () => {\n            let response = await API.get('/bots');\n            dispatch({\n                type: \"INIT\",\n                bots: response.data\n            });\n        };\n\n        getBots();\n    }, []);\n\n    // Socket listening\n    useEffect(() => {\n        state.ws.onmessage = event => {\n            dispatch(JSON.parse(event.data));\n        };\n    });\n\n\n    // Create room\n    const startRoom = async () => {\n        state.ws.send(JSON.stringify({\n            type: \"START_ROOM\"\n        }));\n        dispatch({ type: \"START_ROOM\" });\n    };\n\n    const addBot = () => {\n        if (selectedBot === \"\")\n            return;\n        let data = {\n            type: \"ADD_BOT\",\n            payload: selectedBot\n        };\n        state.ws.send(JSON.stringify(data));\n        setSelectedBot(\"\");\n    };\n\n    const changeSelection = (event) => {\n        setSelectedBot(event.target.value);\n    };\n\n    return (\n        <Grid component={Paper} elevation={3} container item xs={12} className={classes.container}>\n            <Grid container item xs={3} className={classes.sideBar}>\n                <Grid item xs={12} className={classes.select}>\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel>Add a bot</InputLabel>\n                        <Select\n                            variant={'outlined'}\n                            label=\"Add a bot\"\n                            onChange={changeSelection}\n                            value={selectedBot}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {state.remainingBots.map((bot, index) => {\n                                return (\n                                    <MenuItem value={bot.id} key={index}>{bot.name}</MenuItem>\n                                );\n                            })}\n                        </Select>\n                        <Button onClick={addBot} variant={'contained'} color={'secondary'} className={classes.addButton}>Add</Button>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    <List>\n                        <ListSubheader style={{ textAlign: \"center\" }}>Current Bots</ListSubheader>\n                        {state.roomBots.map((bot, index) => (\n                            <ListItem key={index}>\n                                <ListItemText primary={bot.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            <Grid container item xs={9} className={classes.transcriptContainer} ref={scrollContainerRef}>\n                {state.active ? (\n                    <Transcript transcript={state.transcript} scrollContainerRef={scrollContainerRef} />\n                ) : (\n                    <Grid container className={classes.notStartedContainer} item xs={12}>\n                        <Grid item xs={12}>\n                            <p className={classes.notStartedMsg}>Start the room to see messages</p>\n                            <Button onClick={startRoom} variant={'contained'} color={'secondary'}>Start</Button>\n                        </Grid>\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nimport Arena from './Arena';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 30,\n        flexGrow: 1,\n        alignContent: \"flex-start\",\n    },\n    title: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    },\n    fightZone: {\n        flexGrow: 1,\n        padding: 20,\n        height: \"80vh\"\n    }\n}));\n\nexport default function Fight() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <Typography className={classes.title} align={'center'}>WELCOME TO THE DEATH ZONE</Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.fightZone}>\n                <Arena />\n            </Grid>\n        </Grid>\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n        justifyContent: \"space-around\"\n    },\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    feature: {\n        marginTop: 50,\n        flexGrow: 1\n    },\n    button: {\n        margin: \"0 30%\",\n        marginTop: 20,\n        marginBottom: 200,\n        fontSize: 30,\n        padding: \"20px 40px\"\n    }\n}));\n\nexport default function Landing() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={\"center\"}>WELCOME TO CHATBOT WARS</Typography>\n            <div className={classes.container}>\n                <Typography variant={'h6'}>\n                    Build your own chatbot. Watch it crash and burn.\n                </Typography >\n                <Button className={classes.button} size={'large'} variant={'contained'} color={'secondary'} component={RouterLink} to={'/workshop'}>Get Started</Button>\n            </div>\n        </React.Fragment>\n    );\n}\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport API from 'api';\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n    const auth = useProvideAuth();\n    return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n    return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n    // Start as true, and once no user is discovered, routes will be rerendered\n    const [user, setUser] = useState(true);\n\n    // Initial attempt to fetch jwt\n    useEffect(() => {\n        async function fetchData() {\n            let token = localStorage.getItem(\"jwt_token\");\n            if (token != null) {\n                try {\n                    let response = await API.get('/me');\n                    setUser(response.data);\n                } catch (error) {\n                    console.error(error);\n                }\n            } else {\n                setUser(false);\n            }\n        }\n\n        fetchData();\n    }, []);\n\n    const register = async (loginData) => {\n        try {\n            let response = await API.post('/users', loginData);\n            return response;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const login = async (username, password) => {\n        try {\n            let response = await API.post('/sessions', {\n                username,\n                password\n            });\n            // Save token in localstorage\n            localStorage.setItem(\"jwt_token\", response.data.token);\n            setUser(response.data.user);\n            return true;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const logout = () => {\n        // Delete token from local storage\n        localStorage.removeItem(\"jwt_token\");\n        setUser(() => false);\n    };\n\n    // Return the user object and auth methods\n    return {\n        user,\n        register,\n        login,\n        logout,\n    };\n}","import { Button, Dialog, DialogActions, DialogTitle, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    confirmButton: {\n        backgroundColor: props => props.color,\n        '&:hover': {\n            backgroundColor: props => props.hoverColor\n        }\n    }\n}));\n\nexport default function ConfirmModal(props) {\n    const { onConfirm, prompt, confirmText, render } = props;\n    const classes = useStyles(props);\n\n    const [open, setOpen] = useState(false);\n\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            {render && render(handleOpen)}\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle >{prompt}</DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\", marginBottom: 10 }}>\n                    <Button autoFocus onClick={handleClose} variant=\"contained\" color=\"primary\">Cancel</Button>\n                    <Button\n                        onClick={handleConfirm}\n                        variant=\"contained\"\n                        className={classes.confirmButton} >{confirmText}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { AppBar, CssBaseline, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ExitToApp } from '@material-ui/icons';\nimport React from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\nimport ConfirmModal from './workshop/edit/ConfirmModal';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        backgroundColor: theme.palette.primary.dark\n    },\n    dividerColor: {\n        backgroundColor: theme.palette.primary.contrastText\n    },\n    appBarLeft: {\n        width: drawerWidth,\n        flexShrink: 1,\n        fontSize: 30,\n        fontWeight: 500,\n    },\n    appBarRight: {\n        textAlign: \"right\",\n        flexGrow: 1,\n        paddingRight: 20,\n        fontSize: 30,\n    },\n    loginLink: {\n        textDecoration: \"none\",\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    logoutContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-end\"\n    },\n    logoutButton: {\n        color: \"white\",\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    activeNav: {\n        fontWeight: \"bold\",\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main,\n        }\n    },\n    content: {\n        paddingTop: theme.layout.nav.appBarHeight,\n        flexGrow: 1,\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: 'column',\n        overflowX: \"hidden\"\n    },\n}));\n\nexport default function NavMenu({ routes, children }) {\n    const { user, logout } = useAuth();\n\n    const theme = useTheme();\n    const classes = useStyles();\n    const history = useHistory();\n\n    function signout() {\n        logout();\n        history.push(\"/\");\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar disableGutters className={classes.headerContainer}>\n                    <Typography className={classes.appBarLeft} variant=\"h4\" align={'center'} noWrap>\n                        Chatbot Wars\n                    </Typography>\n                    <div className={classes.appBarRight}>\n                        {user ?\n                            <div className={classes.logoutContainer}>\n                                <Typography variant=\"h5\" style={{ alignSelf: \"center\" }}>Hi, {user.username}</Typography>\n                                <ConfirmModal />\n\n                                <ConfirmModal\n                                    render={open => (\n                                        <IconButton onClick={open} className={classes.logoutButton}>\n                                            <ExitToApp />\n                                        </IconButton>\n                                    )}\n                                    onConfirm={signout}\n                                    prompt={\"Are you sure you want to log out?\"}\n                                    confirmText={\"Logout\"}\n                                    color={theme.palette.secondary.main}\n                                    hoverColor={theme.palette.secondary.dark}\n                                />\n\n                            </div>\n                            :\n                            <Typography component={NavLink} to={\"/login\"} variant=\"h5\" className={classes.loginLink}>Login</Typography>\n                        }\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        {Object.values(routes).map((route, index) => (\n                            route.icon && <ListItem\n                                button\n                                exact={route.exact || false}\n                                component={NavLink}\n                                activeClassName={classes.activeNav}\n                                to={route.path}\n                                key={index}>\n                                <ListItemIcon>\n                                    <route.icon />\n                                </ListItemIcon>\n                                <ListItemText primary={route.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Drawer>\n            <main className={classes.content}>\n                {children}\n            </main>\n        </div >\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function Finalize() {\n    return (\n        <React.Fragment>\n            <Grid item container spacing={3} alignContent=\"space-around\" style={{ textAlign: \"center\", height: \"100%\" }}>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >That's a good start.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        You can keep working on your bot anytime by going back to the workshop.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        Click 'To Glory' to send your bot to the battlefield!\n                </Typography>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { moods } from 'api';\n\nconst streamErrors = (msgs) => {\n    return msgs.join(\"\\n\");\n};\n\nexport default function LineInput({ autoFocus, error, errorMessages, label, line, updateLine }) {\n\n    const changeText = (event) => {\n        updateLine({ text: event.target.value });\n    };\n\n    const changeSelection = (event) => {\n        updateLine({ mood: event.target.value });\n    };\n\n\n    return (\n        <React.Fragment>\n            <Grid item xs={9}>\n                <FormControl fullWidth>\n                    <TextField autoFocus={autoFocus || false} value={line.text} error={error} helperText={streamErrors(errorMessages)} label={label} variant=\"outlined\" onChange={changeText} />\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} >\n                <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Mood</InputLabel>\n                    <Select\n                        variant={'outlined'}\n                        label=\"Mood\"\n                        onChange={changeSelection}\n                        value={line.mood}\n                    >\n                        {moods.map((mood, index) => {\n                            return (\n                                <MenuItem value={index} key={index}>{mood}</MenuItem>\n                            );\n                        })}\n                    </Select>\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Greeting must be non-empty\";\n\nexport default function Greetings({ value, updateHandler: updateGreetings, setValidator, titleStyle }) {\n    const [greeting, setGreeting] = useState(value[0]);\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n\n\n    const validate = useCallback(\n        () => {\n            let errorMessages = [];\n            const validGreeting = greeting.text.length > 0;\n            if (!validGreeting) {\n                setError(true);\n                errorMessages.push(badLength);\n            }\n            setErrorMsgs(errorMessages);\n            updateGreetings([greeting]);\n            return validGreeting;\n        },\n        [greeting, updateGreetings],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeGreeting = ({ text, mood }) => {\n        setGreeting({\n            text: text !== undefined ? text : greeting.text,\n            mood: mood !== undefined ? mood : greeting.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>What's your bot gonna say prior to embarassing your foes?</Typography>\n            </Grid>\n            <LineInput autoFocus error={error} errorMessages={errorMsgs} label=\"Greeting\" line={greeting} updateLine={changeGreeting} />\n        </React.Fragment>\n    );\n}\n","import { useEffect, useState } from \"react\";\n\n// Delay in milliseconds\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}","import { FormControl, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport API from 'api';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function Name({ value, updateHandler: updateName, setValidator, titleStyle }) {\n    const classes = useStyles();\n\n    const [name, setName] = useState(value);\n    const [error, setError] = useState(\"\");\n\n    const validate = useCallback(\n        async () => {\n            if (!validName(name)) {\n                setError(\"Name must be between 3 and 30 characters\");\n                return false;\n            }\n            // Check unique username\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setError(\"That bot name is taken\");\n                    return false;\n                } else {\n                    setError(\"\");\n                    updateName(name);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            return true;\n        },\n        [name, updateName],\n    );\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName) {\n                    setError(\"That bot name is taken\");\n                } else {\n                    setError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName]);\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setError(\"\");\n        setCheckedName(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>First thing's first, give your bot a name</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl fullWidth>\n                    <TextField\n                        autoFocus\n                        className={error.length === 0 && validName && checkedName ? classes.valid : null}\n                        error={error.length > 0}\n                        helperText={error.length === 0 && validName && checkedName ? \"Valid bot name\" : error}\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        value={name}\n                        onChange={changeName} />\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Question must be non-empty\";\n\nexport default function Questions({ value, updateHandler: updateQuestions, setValidator, titleStyle }) {\n    const [question1, setQuestion1] = useState(value[0]);\n    const [question2, setQuestion2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validQuestion1 = question1.text.length > 0;\n            const validQuestion2 = question2.text.length > 0;\n            if (!validQuestion1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validQuestion2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateQuestions([question1, question2]);\n            return validQuestion1 && validQuestion2;\n        },\n        [question1, question2, updateQuestions],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeQuestion1 = ({ text, mood }) => {\n        setQuestion1({\n            text: text !== undefined ? text : question1.text,\n            mood: mood !== undefined ? mood : question1.mood\n        });\n    };\n\n    const changeQuestion2 = ({ text, mood }) => {\n        setQuestion2({\n            text: text !== undefined ? text : question2.text,\n            mood: mood !== undefined ? mood : question2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Everyone needs a conversation starter</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Question 1\" error={error1} errorMessages={errorMsgs1} line={question1} updateLine={changeQuestion1} />\n            <LineInput label=\"Question 2\" error={error2} errorMessages={errorMsgs2} line={question2} updateLine={changeQuestion2} />\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Response must be non-empty\";\n\nexport default function Responses({ value, updateHandler: updateResponses, setValidator, titleStyle }) {\n    const [response1, setResponse1] = useState(value[0]);\n    const [response2, setResponse2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validResponse1 = response1.text.length > 0;\n            const validResponse2 = response2.text.length > 0;\n            if (!validResponse1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validResponse2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateResponses([response1, response2]);\n            return validResponse1 && validResponse2;\n        },\n        [response1, response2, updateResponses],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeResponse1 = ({ text, mood }) => {\n        setResponse1({\n            text: text !== undefined ? text : response1.text,\n            mood: mood !== undefined ? mood : response1.mood\n        });\n    };\n\n    const changeResponse2 = ({ text, mood }) => {\n        setResponse2({\n            text: text !== undefined ? text : response2.text,\n            mood: mood !== undefined ? mood : response2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Time for some trash talk</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Response 1\" error={error1} errorMessages={errorMsgs1} line={response1} updateLine={changeResponse1} />\n            <LineInput label=\"Response 2\" error={error2} errorMessages={errorMsgs2} line={response2} updateLine={changeResponse2} />\n        </React.Fragment>\n    );\n}\n","import { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'api';\nimport Finalize from 'components/workshop/create/Finalize';\nimport Greetings from 'components/workshop/create/Greetings';\nimport Name from 'components/workshop/create/Name';\nimport Questions from 'components/workshop/create/Questions';\nimport Responses from 'components/workshop/create/Responses';\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: \"flex\",\n        flexDirection: 'column',\n        padding: 20\n    },\n    activeStep: {\n        color: theme.palette.success.light\n    },\n    stepContainer: {\n        padding: 20,\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n    stepContent: {\n        flexGrow: 1,\n        padding: \"0 !important\",\n        alignContent: \"flex-start\"\n    },\n    stepButton: {\n        alignSelf: \"flex-end\",\n        textAlign: \"center\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n    }\n}));\n\n\nexport default function Create() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [completed, setCompleted] = useState(new Set());\n\n    const allStepsCompleted = () => {\n        return completed.size === steps.length;\n    };\n\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        // Check for allowing user to directly advance this far\n        if (completed.has(step)) {\n            setActiveStep(step);\n        }\n    };\n\n    const handleComplete = async () => {\n        const newCompleted = new Set(completed);\n        // Call child validation method\n        let valid = await steps[activeStep].validate();\n        if (!valid) {\n            newCompleted.delete(activeStep);\n            setCompleted(newCompleted);\n            return;\n        }\n\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        if (completed.size !== steps.length) {\n            handleNext();\n        }\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    const lastStep = () => {\n        return activeStep === steps.length - 1;\n    };\n\n    const [botID, setBotID] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [greetings, setGreetings] = useState([\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [questions, setQuestions] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [responses, setResponses] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n\n    const steps = [\n        {\n            title: \"Name\",\n            component: Name,\n            value: name,\n            handler: setName\n        },\n        {\n            title: \"Greetings\",\n            component: Greetings,\n            value: greetings,\n            handler: setGreetings\n        },\n        {\n            title: \"Questions\",\n            component: Questions,\n            value: questions,\n            handler: setQuestions\n        },\n        {\n            title: \"Responses\",\n            component: Responses,\n            value: responses,\n            handler: setResponses\n        },\n        {\n            title: \"Finalize\",\n            component: Finalize,\n            value: name,\n            handler: null,\n            validate: () => true\n        },\n    ];\n\n    const createBot = async () => {\n        const bot = {\n            name: name,\n            greetings: greetings,\n            questions: questions,\n            responses: responses,\n        };\n        console.log(bot);\n\n        let response = await API.post('/bots', bot);\n        // Should log ID here\n        setBotID(response.data.id);\n        console.log(JSON.stringify(response.data));\n    };\n\n\n    return (\n        <div className={classes.root}>\n            {!allStepsCompleted() && (<Stepper alternativeLabel nonLinear activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    return (\n                        <Step active={activeStep === index} key={step.title} {...stepProps}>\n                            <StepButton\n                                disabled={activeStep !== index && !isStepComplete(index)}\n                                onClick={handleStep(index)}\n                                completed={activeStep !== index && isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {step.title}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>)}\n            <Grid container direction={'row'} spacing={3} className={classes.stepContainer}>\n                {allStepsCompleted() ? (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant={'h4'}>\n                                Bot created successfully!\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button to={`/workshop/edit/${botID}`} component={RouterLink} variant={'contained'} color={'secondary'}>See it in the workshop</Button>\n                        </Grid>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <Grid container spacing={3} item xs={12} className={classes.stepContent}>\n                            {React.createElement(\n                                steps[activeStep].component,\n                                {\n                                    value: steps[activeStep].value,\n                                    updateHandler: steps[activeStep].handler,\n                                    setValidator: (validator => steps[activeStep].validate = validator),\n                                    titleStyle: { padding: \"30px 0px\" }\n                                },\n                            )}\n                        </Grid>\n                        <Grid item xs={12} className={classes.stepButton}>\n                            <Button disabled={activeStep === 0} onClick={handleBack} size=\"large\" variant=\"contained\" color=\"secondary\">Back</Button>\n                            {!lastStep() ?\n                                (\n                                    < Button onClick={handleComplete} size=\"large\" variant=\"contained\" color=\"secondary\">Next</Button>\n                                ) : (\n                                    < Button onClick={() => { createBot(); handleComplete(); }} size=\"large\" variant=\"contained\" color=\"secondary\">To Glory</Button>\n                                )\n                            }\n                        </Grid>\n                    </React.Fragment>\n                )}\n            </Grid>\n        </div >\n    );\n}\n","import { Button, CircularProgress, Grid, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport API from 'api';\nimport ConfirmModal from './edit/ConfirmModal';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n    },\n    botsContainer: {\n        paddingTop: 20,\n        alignContent: \"flex-start\"\n    },\n    noBots: {\n        marginTop: \"20%\",\n        marginBottom: 20\n    },\n    tableContainer: {\n        padding: 20\n    },\n    selectBot: {\n        textDecoration: \"none\",\n        color: \"black\",\n        cursor: \"pointer\",\n        '&:hover': {\n            color: \"green\"\n        }\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n    loadingContainer: {\n        alignContent: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n}));\n\n\nexport default function Edit() {\n    const classes = useStyles();\n    const history = useHistory();\n\n\n    const [loading, setLoading] = useState(true);\n    const [bots, setBots] = useState([]);\n\n\n    // Fetch bot data\n    const getBots = useCallback(\n        async () => {\n            let response = await API.get('/users/bots');\n            setBots(response.data);\n            setLoading(false);\n        },\n        [],\n    );\n\n    const selectBot = (id) => {\n        history.push(`/workshop/edit/${id}`);\n    };\n\n    useEffect(() => {\n        getBots();\n    }, [getBots]);\n\n\n    const deleteBot = async (id) => {\n        await API.delete(`/bots/${id}`);\n        getBots();\n    };\n\n    return (\n        <Grid container className={classes.container}>\n            {loading ? (\n                <Grid item xs={12} className={classes.loading}>\n                    <CircularProgress color=\"secondary\" />\n                </Grid >\n            ) : (\n                <Grid container item xs={12} className={classes.botsContainer}>\n                    {bots.length > 0 ? (\n                        <React.Fragment>\n                            <Grid item xs={12} >\n                                <Typography variant={'h5'} align={'center'}>Select a bot to edit</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.tableContainer}>\n                                <TableContainer component={Paper} >\n                                    <Table stickyHeader>\n                                        <colgroup>\n                                            <col style={{ width: '80%' }} />\n                                            <col style={{ width: '20%' }} />\n                                        </colgroup>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell align={'center'}>Delete</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {bots.map((bot, index) => (\n                                                <TableRow key={index} hover>\n                                                    <TableCell className={classes.selectBot} onClick={() => { selectBot(bot.id); }} align={'left'}>\n                                                        {bot.name}\n                                                    </TableCell>\n                                                    <TableCell align={'center'}>\n                                                        <ConfirmModal\n                                                            render={open => (\n                                                                <IconButton onClick={open} className={classes.delete}>\n                                                                    <DeleteIcon />\n                                                                </IconButton>\n                                                            )}\n                                                            onConfirm={() => deleteBot(bot.id)}\n                                                            prompt={\"Are you sure you want to delete this bot?\"}\n                                                            confirmText={\"Delete\"}\n                                                            color={\"red\"}\n                                                            hoverColor={\"darkred\"}\n                                                        />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.noBots}>\n                                <Typography variant={'h4'} align={'center'}>You haven't created any bots</Typography>\n                            </Grid>\n                            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                <Button component={RouterLink} to={\"/workshop/create\"} variant={'contained'} color={'secondary'}>Create a bot</Button>\n                            </Grid>\n                        </React.Fragment>\n                    )\n                    }\n                </Grid>\n            )}\n        </Grid >\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n    },\n    directionText: {\n        fontSize: 24,\n        padding: 20\n    },\n    button: {\n        fontSize: 20,\n        margin: \"auto\",\n        width: \"50%\"\n    }\n}));\n\nexport default function Entrance() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={'center'}>WELCOME TO THE WORKSHOP</Typography>\n            <div className={classes.container}>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Start off by creating a bot\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/create'} size=\"large\" variant=\"contained\" color=\"secondary\">Create</Button>\n                </div>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Or keep working on existing ones\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/edit'} size=\"large\" variant=\"contained\" color=\"secondary\">Edit</Button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, Grid, IconButton, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useState } from 'react';\nimport LineInput from '../create/LineInput';\nimport ConfirmModal from './ConfirmModal';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"70%\"\n    },\n    row: {\n        overflowWrap: 'break-word'\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n}));\n\nconst badLength = \"Question must be non-empty\";\n\n\nexport default function LineTable({ botID, lineType, lines, min, refresh }) {\n    const classes = useStyles();\n    const [line, setLine] = useState({\n        text: \"\",\n        mood: 0\n    });\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n    const [open, setOpen] = useState(false);\n\n\n    const changeLine = ({ text, mood }) => {\n        setLine({\n            text: text !== undefined ? text : line.text,\n            mood: mood !== undefined ? mood : line.mood\n        });\n    };\n\n    const clearInputs = () => {\n        setLine({\n            text: \"\",\n            mood: 0\n        });\n    };\n\n    const validate = () => {\n        setError(false);\n        let errorMessages = [];\n\n        const validText = line.text.length > 0;\n        if (!validText) {\n            errorMessages.push(badLength);\n            setError(true);\n        }\n        setErrorMsgs(errorMessages);\n\n        if (!validText)\n            return;\n        addLine();\n    };\n\n    const addLine = async () => {\n        try {\n            await API.post(`/bots/${botID}/${lineType}`, line);\n            refresh();\n            clearInputs();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const deleteLine = async (index) => {\n        if (lines.length <= min) {\n            setOpen(true);\n            return;\n        }\n        await API.delete(`/bots/${botID}/${lineType}/${index}`);\n        refresh();\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogTitle>\n                    Must have at least {min} {lineType}\n                </DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">OK</Button>\n                </DialogActions>\n            </Dialog>\n            <Grid item xs={12} className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table stickyHeader>\n                        <colgroup>\n                            <col style={{ width: '80%' }} />\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align={'center'}>\n                                    Text\n                        </TableCell>\n                                <TableCell align={'center'}>\n                                    Mood\n                            </TableCell>\n                                <TableCell align={'center'}>\n                                    Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {lines.map((line, index) => (\n                                <TableRow hover key={index} className={classes.row}>\n                                    <TableCell align={'left'}>\n                                        {line.text}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        {moods[line.mood]}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <ConfirmModal\n                                            render={open => (\n                                                <IconButton onClick={open} className={classes.delete}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            )}\n                                            onConfirm={() => deleteLine(index)}\n                                            prompt={\"Are you sure you want to delete this line?\"}\n                                            confirmText={\"Delete\"}\n                                            color={\"red\"}\n                                            hoverColor={\"darkred\"}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid container spacing={3} item xs={12}>\n                <LineInput label={`Add ${lineType.substr(0, -1)}`} error={error} errorMessages={errorMsgs} line={line} updateLine={changeLine} />\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Button onClick={validate} fullWidth size={\"large\"} variant={'contained'} color={'secondary'}>Add</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { AppBar, Button, CircularProgress, FormControl, Grid, List, ListItem, ListItemText, makeStyles, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'api';\nimport LineTable from './LineTable';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    name: {\n        fontSize: 30,\n        fontWeight: 600,\n        textAlign: \"center\",\n        padding: 5.5\n    },\n    tabContainer: {\n        padding: 20,\n        height: \"100%\",\n        flexGrow: 1\n    },\n    generalContainer: {\n        paddingTop: 30,\n        textAlign: \"center\",\n        flexGrow: 1,\n        alignContent: \"flex-start\"\n    },\n    generalSave: {\n        alignSelf: \"flex-end\",\n    },\n    errorList: {\n        textAlign: \"center\",\n        color: \"red\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function BotDetail() {\n    const classes = useStyles();\n    const { id } = useParams();\n\n    const [loading, setLoading] = useState(true);\n    const [tab, setTab] = React.useState(0);\n    const [bot, setBot] = useState({});\n    const [name, setName] = useState(\"\");\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [error, setError] = useState(false);\n\n    // General config\n    const [nameError, setNameError] = useState(\"\");\n\n    const validate = async () => {\n        let errorMsgs = [];\n\n        const validGreetings = bot.greetings.length >= 1;\n        const validQuestions = bot.questions.length >= 2;\n        const validResponses = bot.responses.length >= 2;\n        if (!validName(name)) {\n            setNameError(\"Name must be between 3 and 30 characters\");\n            errorMsgs.push(\"Name must be between 3 and 30 characters\");\n        }\n        if (!validGreetings) {\n            errorMsgs.push(\"Must have at least 1 greeting\");\n        }\n        if (!validQuestions) {\n            errorMsgs.push(\"Must have at least 2 questions\");\n        }\n        if (!validResponses) {\n            errorMsgs.push(\"Must have at least 2 responses\");\n        }\n\n        if (!validName(name) || !validGreetings || !validQuestions || !validResponses) {\n            setErrorMessages(errorMsgs);\n            setError(true);\n            return;\n        }\n\n        if (bot.name !== name) {\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                    updateBot();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        } else {\n            setNameError(\"That's the same name!\");\n        }\n    };\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setNameError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName && currentName !== bot.name) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName, bot.name]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setNameError(\"\");\n        setCheckedName(false);\n    };\n\n    // Fetch bot data\n    const getBotData = useCallback(\n        async () => {\n            let response = await API.get(`/bots/${id}`);\n            setBot(response.data);\n            setName(response.data.name);\n            setLoading(false);\n        },\n        [id],\n    );\n\n    // Fetch bot data\n    const updateBot = async () => {\n        await API.put(`/bots/${id}`, {\n            ...bot,\n            name: name\n        }\n        );\n        getBotData();\n    };\n\n    // Initial load\n    useEffect(() => {\n        getBotData();\n    }, [getBotData]);\n\n    // Tab switching\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n    const showValidName = checkedName && nameError.length === 0 && validName(name) && name !== bot.name;\n\n    return (\n        <React.Fragment>\n            {loading ? (\n                <Grid container style={{ flexGrow: 1 }}>\n                    <Grid item xs={12} className={classes.loading}>\n                        <CircularProgress color=\"secondary\" />\n                    </Grid >\n                </Grid >\n            ) : (\n                <React.Fragment>\n                    <Typography className={classes.name}>\n                        {bot.name}\n                    </Typography>\n                    <AppBar position=\"static\">\n                        <Tabs value={tab} onChange={handleChange} variant={'fullWidth'}>\n                            <Tab label=\"General\" />\n                            <Tab label=\"Greetings\" />\n                            <Tab label=\"Questions\" />\n                            <Tab label=\"Responses\" />\n                        </Tabs>\n                    </AppBar>\n                    <React.Fragment>\n                        <TabPanel value={tab} index={0} className={classes.general}>\n                            <Grid container spacing={3} item xs={12} className={classes.generalContainer}>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth>\n                                        <TextField\n                                            autoFocus\n                                            className={showValidName ? classes.valid : null}\n                                            error={nameError.length > 0}\n                                            helperText={showValidName ? \"Valid bot name\" : nameError}\n                                            label=\"Name\"\n                                            variant=\"outlined\"\n                                            value={name}\n                                            onChange={changeName} />\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                            {error && (\n                                <Grid item xs={12} className={classes.errorList}>\n                                    <List subheader={\"Please fix the following errors\"}>\n                                        {errorMessages.map((msg, index) => (\n                                            <ListItem key={index}>\n                                                <ListItemText primary={msg} className={classes.errorList} />\n                                            </ListItem>\n                                        ))}\n                                    </List>\n                                </Grid>\n                            )}\n                            <Grid item xs={12} className={classes.generalSave}>\n                                <Button onClick={validate} fullWidth size={'large'} variant={'contained'} color={'secondary'}>Save</Button>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={tab} index={1}>\n                            <LineTable botID={bot.id} lineType={\"greetings\"} lines={bot.greetings} min={1} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={2}>\n                            <LineTable botID={bot.id} lineType={\"questions\"} lines={bot.questions} min={2} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={3}>\n                            <LineTable botID={bot.id} lineType={\"responses\"} lines={bot.responses} min={2} refresh={getBotData} />\n                        </TabPanel>\n                    </React.Fragment>\n                </React.Fragment>\n            )\n            } </React.Fragment>\n    );\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            style={{ height: \"100%\" }}\n            {...other}\n        >\n            {value === index && (\n                <Grid container className={classes.tabContainer}>\n                    {children}\n                </Grid>\n            )}\n        </div>\n    );\n}","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Lock, Person } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: 500,\n        margin: \"auto\",\n        padding: 20,\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    icon: {\n        alignSelf: \"center\",\n        fontSize: 44,\n        paddingRight: 10\n    },\n    failed: {\n        color: \"red\",\n        fontSize: 16,\n        padding: 0\n    }\n}));\n\nexport default function Login() {\n    const classes = useStyles();\n    const { login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [failed, setFailed] = useState(false);\n\n\n    const validate = async () => {\n        let newErrors = {\n            username: \"\",\n            password: \"\",\n        };\n        let valid = true;\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryLogin();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryLogin() {\n        try {\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            setFailed(true);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Login to edit your bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        {failed && <Grid item xs={12} className={classes.failed}>\n                            <Typography align={'center'}>Invalid username or password</Typography>\n                        </Grid>}\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Person className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.username.length === 0 && errors.username.length > 0}\n                                helperText={state.username.length === 0 ? errors.username : \"\"}\n                                onChange={event => setState({ ...state, username: event.target.value })}\n                                label=\"Username\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Lock className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\" style={{}}>Log In</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Not registered? <RouterLink to={\"/register\"} className={classes.link}>Click here to create an account</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport API from 'api';\nimport { useAuth } from 'hooks/auth';\nimport useDebounce from 'hooks/debounce';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: 600,\n        margin: \"auto\",\n        padding: 20\n    },\n    formRow: {\n        display: \"flex\",\n        justifyContent: \"space-around\"\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nexport default function Register() {\n    const classes = useStyles();\n    const { register, login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [checkedUsername, setCheckedUsername] = useState(false);\n    const debouncedUsername = useDebounce(state.username, 400);\n\n    // Check unique username\n    useEffect(() => {\n        async function checkUsername(username) {\n            if (username.length === 0)\n                return;\n            try {\n                let response = await API.get(`/unique/users/${username}`);\n                if (!response.data.valid && username === debouncedUsername) {\n                    setErrors(errors => {\n                        return { ...errors, username: \"That username is taken\" };\n                    });\n                } else {\n                    setErrors(errors => {\n                        return { ...errors, username: \"\" };\n                    });\n                }\n                setCheckedUsername(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkUsername(debouncedUsername);\n    }, [debouncedUsername]);\n\n\n    function validate() {\n        let newErrors = {\n            firstName: \"\",\n            lastName: \"\",\n            username: errors.username,\n            password: \"\",\n        };\n        let valid = true;\n        if (state.firstName.length === 0) {\n            newErrors.firstName = \"First name must not be empty\";\n            valid = false;\n        }\n        if (state.lastName.length === 0) {\n            newErrors.lastName = \"Last name must not be empty\";\n            valid = false;\n        }\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryRegister();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryRegister() {\n        try {\n            await register(state);\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Register to create your own bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                error={state.firstName.length === 0 && errors.firstName.length > 0}\n                                helperText={state.firstName.length === 0 ? errors.firstName : \"\"}\n                                onChange={event => setState({ ...state, firstName: event.target.value })}\n                                label=\"First Name\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.lastName.length === 0 && errors.lastName.length > 0}\n                                helperText={state.lastName.length === 0 ? errors.lastName : \"\"}\n                                onChange={event => setState({ ...state, lastName: event.target.value })}\n                                label=\"Last Name\" variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                className={errors.username.length === 0 && state.username.length > 0 && checkedUsername ? classes.valid : null}\n                                error={errors.username.length > 0}\n                                helperText={errors.username.length === 0 && state.username.length !== 0 && checkedUsername ? \"Valid username\" : errors.username}\n                                onChange={event => {\n                                    setState({ ...state, username: event.target.value });\n                                    setErrors({ ...errors, username: \"\" });\n                                    setCheckedUsername(false);\n                                }}\n                                label=\"Username\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\">Register</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Already a user? <RouterLink to={\"/login\"} className={classes.link}>Click here to login</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import Workshop from 'components/workshop/Workshop';\nimport Fight from 'components/fight/Fight';\nimport Home from \"components/Home\";\nimport NavMenu from 'components/NavMenu';\nimport React from \"react\";\nimport {\n    HashRouter as Router,\n    Redirect,\n    Route, Switch\n} from \"react-router-dom\";\nimport { Home as HomeIcon, Build, Forum } from '@material-ui/icons';\nimport Create from 'components/workshop/Create';\nimport Edit from 'components/workshop/Edit';\nimport Entrance from 'components/workshop/Entrance';\nimport BotDetail from 'components/workshop/edit/BotDetail';\nimport Login from 'components/auth/Login';\nimport Register from 'components/auth/Register';\nimport { useAuth } from 'hooks/auth';\n\n\nexport const routes = {\n    \"/\": {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        exact: true,\n        icon: HomeIcon\n    },\n    \"/workshop\": {\n        name: \"Workshop\",\n        path: \"/workshop\",\n        component: Workshop,\n        icon: Build,\n        routes: [\n            {\n                path: \"/\",\n                component: Entrance,\n                auth: false\n            },\n            {\n                path: \"/create\",\n                component: Create,\n                auth: true\n            },\n            {\n                path: \"/edit\",\n                component: Edit,\n                auth: true\n            },\n            {\n                path: \"/edit/:id\",\n                component: BotDetail,\n                auth: true\n            }\n        ]\n    },\n    \"/fight\": {\n        name: \"Fight\",\n        path: \"/fight\",\n        component: Fight,\n        icon: Forum\n    },\n    \"/login\": {\n        name: \"Login\",\n        path: \"/login\",\n        component: Login,\n        noAuth: true\n    },\n    \"/register\": {\n        name: \"Register\",\n        path: \"/register\",\n        component: Register,\n        noAuth: true\n    }\n};\n\nexport default function App() {\n    return (\n        <Router>\n            <NavMenu routes={routes}>\n                <Switch>\n                    {Object.values(routes).map((route, i) => {\n                        if (route.auth) {\n                            return (\n                                <PrivateRoute exact={route.exact || false} path={route.path} key={i}>\n                                    <route.component routes={route.routes} />\n                                </PrivateRoute>\n                            );\n                        } else {\n                            if (route.noAuth) {\n                                return (\n                                    <NoAuthRoute exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </NoAuthRoute>\n                                );\n                            } else {\n                                return (\n                                    <Route exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </Route>\n                                );\n                            }\n                        }\n                    })}\n                    <Route path=\"*\"\n                        render={({ location }) =>\n                            <Redirect\n                                to={{\n                                    pathname: \"/\",\n                                    state: { from: location }\n                                }}\n                            />\n                        }\n                    />\n                </Switch>\n            </NavMenu>\n        </Router>\n    );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nexport function PrivateRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\n// Only available if not logged in (login/register)\nexport function NoAuthRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    <Redirect\n                        to={{\n                            pathname: \"/\",\n                        }}\n                    />\n                ) : (\n                    children\n                )\n            }\n        />\n    );\n}","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { PrivateRoute } from 'Router';\n\n\nexport default function Workshop({ routes }) {\n    const { path } = useRouteMatch();\n\n    return (\n        <React.Fragment>\n            <Switch>\n                {routes.map((route, i) => {\n                    if (route.auth) {\n                        return (\n                            <PrivateRoute exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </PrivateRoute>\n                        );\n                    } else {\n                        return (\n                            <Route exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </Route>\n                        );\n                    }\n                })}\n            </Switch>\n        </React.Fragment>\n    );\n}\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { brown, amber } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: brown[300],\n            main: brown[600],\n            dark: brown[900],\n            contrastText: '#fff',\n        },\n        secondary: {\n            light: amber[500],\n            main: amber[600],\n            dark: amber[800],\n            contrastText: '#000',\n        },\n    },\n    layout: {\n        nav: {\n            appBarHeight: 64\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport Router from './Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'theme';\nimport { ProvideAuth } from \"hooks/auth\";\n\n\nexport default function App() {\n    return (\n        <ProvideAuth>\n            <ThemeProvider theme={theme}>\n                <Router />\n            </ThemeProvider>\n        </ProvideAuth>\n\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}