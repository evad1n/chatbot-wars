{"version":3,"sources":["api.js","components/fight/Transcript.jsx","components/fight/Arena.jsx","components/fight/Fight.jsx","components/Home.jsx","hooks/auth.js","components/workshop/edit/ConfirmModal.jsx","components/NavMenu.jsx","components/workshop/create/Finalize.jsx","components/workshop/create/LineInput.jsx","components/workshop/create/Greetings.jsx","hooks/debounce.js","components/workshop/create/Name.jsx","components/workshop/create/Questions.jsx","components/workshop/create/Responses.jsx","components/workshop/Create.jsx","components/workshop/Edit.jsx","components/workshop/Entrance.jsx","components/workshop/edit/LineTable.jsx","components/workshop/edit/BotDetail.jsx","components/auth/Login.jsx","components/auth/Register.jsx","Router.jsx","components/workshop/Workshop.jsx","theme.js","App.jsx","index.js"],"names":["API","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","moods","useStyles","makeStyles","theme","container","flexGrow","maxHeight","line","display","name","fontWeight","Transcript","transcript","scrollContainerRef","classes","scrollRef","useRef","useEffect","el","current","scrollHeight","clientHeight","scrollTop","scrollIntoView","behaviour","length","Box","className","List","ListItem","ListItemText","primary","map","msg","index","Fragment","ref","text","mood","Divider","flexWrap","height","border","sideBar","borderRight","minWidth","select","padding","borderBottom","addButton","marginTop","botListContainer","flexDirection","minHeight","botList","overflow","currentBotsTitle","textAlign","opacity","fontSize","notStartedContainer","justifyContent","alignContent","notStartedMsg","transcriptContainer","initialState","ws","WebSocket","document","location","host","active","roomBots","remainingBots","reducer","state","action","type","bots","addedBot","find","bot","id","newRemaining","filter","removedBot","newRoomBots","message","Error","Arena","useState","selectedBot","setSelectedBot","useReducer","dispatch","a","get","response","data","getBots","onmessage","event","JSON","parse","startRoom","send","stringify","Grid","component","Paper","elevation","item","xs","direction","FormControl","variant","fullWidth","InputLabel","Select","label","onChange","target","value","MenuItem","Button","onClick","payload","color","Typography","ListItemSecondaryAction","Tooltip","title","IconButton","edge","aria-label","Close","paddingTop","fightZone","flex","marginBottom","feature","button","margin","authContext","createContext","ProvideAuth","children","auth","user","setUser","loaded","setLoaded","fetchData","console","register","loginData","post","login","username","password","setItem","logout","removeItem","useProvideAuth","Provider","useAuth","useContext","confirmButton","backgroundColor","props","hoverColor","ConfirmModal","onConfirm","prompt","confirmText","render","open","setOpen","handleClose","Dialog","onClose","DialogTitle","DialogActions","style","autoFocus","root","appBar","zIndex","drawer","palette","dark","breakpoints","up","width","flexShrink","menuButton","marginRight","spacing","dividerColor","contrastText","appBarLeft","appBarRight","paddingRight","loginLink","textDecoration","secondary","main","logoutContainer","alignItems","logoutButton","drawerPaper","drawerContainer","drawerHeader","activeNav","content","layout","nav","appBarHeight","overflowX","NavMenu","routes","useTheme","history","useHistory","drawerOpen","setDrawerOpen","Hidden","smDown","implementation","Toolbar","mdUp","align","Object","values","route","icon","exact","NavLink","activeClassName","to","path","ListItemIcon","CssBaseline","AppBar","position","disableGutters","headerContainer","Menu","xsDown","ExitToApp","push","smUp","Drawer","paper","ModalProps","keepMounted","Finalize","LineInput","msgs","errorMessages","updateLine","TextField","helperText","join","Greetings","updateGreetings","updateHandler","setValidator","titleStyle","greeting","setGreeting","setError","errorMsgs","setErrorMsgs","validate","useCallback","validGreeting","undefined","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","valid","borderColor","borderWidth","validName","Name","updateName","setName","checkedName","setCheckedName","debouncedName","currentName","checkBotName","badLength","Questions","updateQuestions","question1","setQuestion1","question2","setQuestion2","error1","setError1","error2","setError2","errorMsgs1","setErrorMsgs1","errorMsgs2","setErrorMsgs2","errorMessages1","errorMessages2","validQuestion1","validQuestion2","Responses","updateResponses","response1","setResponse1","response2","setResponse2","validResponse1","validResponse2","activeStep","success","light","stepContainer","stepContent","stepButton","alignSelf","botsContainer","noBots","tableContainer","selectBot","cursor","delete","loadingContainer","loading","directionText","row","overflowWrap","LineTable","botID","lineType","lines","min","refresh","setLine","addLine","deleteLine","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","hover","substr","validText","size","tabContainer","generalContainer","generalSave","errorList","TabPanel","other","role","hidden","paddingBottom","formContainer","bottomText","link","info","failed","formRow","RouterLink","HomeIcon","useRouteMatch","i","PrivateRoute","Build","setActiveStep","Set","completed","setCompleted","allStepsCompleted","steps","handleStep","step","has","handleComplete","newCompleted","add","isStepComplete","setBotID","greetings","setGreetings","questions","setQuestions","responses","setResponses","createBot","log","Stepper","alternativeLabel","nonLinear","Step","StepButton","disabled","React","createElement","validator","setLoading","setBots","deleteBot","CircularProgress","useParams","tab","setTab","setBot","setErrorMessages","nameError","setNameError","validGreetings","validQuestions","validResponses","updateBot","getBotData","put","showValidName","Tabs","newValue","Tab","general","subheader","Forum","useLocation","setState","errors","setErrors","setFailed","newErrors","tryLogin","from","pathname","replace","Person","Lock","noAuth","firstName","lastName","checkedUsername","setCheckedUsername","debouncedUsername","checkUsername","tryRegister","App","NoAuthRoute","rest","createMuiTheme","brown","amber","ThemeProvider","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.534e081f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n    baseURL: \"/api\",\n});\n\n// Add stored token to header for each request\nAPI.interceptors.request.use(config => {\n    const token = localStorage.getItem(\"jwt_token\");\n    config.headers.Authorization = `Bearer ${token}`;\n    return config;\n},\n    error => Promise.reject(error)\n);\n\n\nconst moods = [\n    \"Happy\",\n    \"Angry\",\n    \"Sad\"\n];\n\nexport { moods };\n\n\nexport default API;","import { Box, Divider, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport { moods } from 'api';\nimport React, { useEffect, useRef } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        maxHeight: \"100%\",\n    },\n    line: {\n        display: \"flex\"\n    },\n    name: {\n        fontWeight: 700\n    }\n}));\n\nexport default function Transcript({ transcript, scrollContainerRef }) {\n    const classes = useStyles();\n    const scrollRef = useRef(null);\n\n\n    // Autoscroll\n    useEffect(() => {\n        const el = scrollContainerRef.current;\n        if (!scrollRef.current)\n            return;\n        if ((el.scrollHeight - el.clientHeight) - el.scrollTop < 100) {\n            scrollRef.current.scrollIntoView({ behaviour: \"smooth\" });\n        }\n    }, [transcript.length, scrollContainerRef]);\n\n    return (\n        <Box className={classes.container}>\n            <List>\n                {transcript.length === 0 ?\n                    <ListItem>\n                        <ListItemText primary={\"Waiting for messages...\"} />\n                    </ListItem>\n                    :\n                    transcript.map((msg, index) => (\n                        <React.Fragment key={index}>\n                            <ListItem ref={index === transcript.length - 1 ? scrollRef : null}>\n                                <Box className={\"MuiListItemText-root MuiListItemText-multiline\"}>\n                                    <p className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\"}><strong>{msg.name}</strong>: {msg.line.text}</p>\n                                    <p className={\"MuiTypography-root MuiListItemText-secondary MuiTypography-body2 MuiTypography-colorTextSecondary MuiTypography-displayBlock\"}>{moods[msg.line.mood]}</p>\n                                </Box>\n                            </ListItem>\n                            {index !== transcript.length - 1 && <Divider />}\n                        </React.Fragment>\n                    ))\n                }\n            </List>\n        </Box>\n    );\n}\n","import { Button, Divider, FormControl, Grid, IconButton, InputLabel, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, MenuItem, Paper, Select, Tooltip, Typography } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport API from 'api';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\nimport Transcript from './Transcript';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        flexWrap: \"nowrap\",\n        height: \"100%\",\n        border: \"1px solid #bbb\"\n    },\n    sideBar: {\n        borderRight: \"1px solid grey\",\n        maxHeight: \"100%\",\n        flexWrap: \"nowrap\",\n        minWidth: 160\n    },\n    select: {\n        padding: 10,\n        borderBottom: \"1px solid grey\",\n    },\n    addButton: {\n        marginTop: 5\n    },\n    botListContainer: {\n        flexGrow: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        minHeight: 0\n    },\n    botList: {\n        maxHeight: \"100%\",\n        overflow: \"auto\",\n        minHeight: 0\n    },\n    currentBotsTitle: {\n        padding: 10,\n        textAlign: \"center\",\n        opacity: 0.8,\n        fontWeight: \"bold\",\n        fontSize: 20,\n        borderBottom: \"0.1px solid black\",\n    },\n    notStartedContainer: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    notStartedMsg: {\n        textAlign: \"center\",\n        fontSize: 20\n    },\n    transcriptContainer: {\n        overflow: 'auto',\n        maxHeight: \"100%\"\n    }\n}));\n\nconst initialState = {\n    ws: new WebSocket(process.env.NODE_ENV === 'development' ? \"ws://localhost:8080/api/rooms\" : `wss://${document.location.host}/api/rooms`),\n    active: false,\n    roomBots: [],\n    transcript: [],\n    remainingBots: []\n};\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"INIT\":\n            return { ...state, remainingBots: action.bots };\n        case \"START_ROOM\":\n            return { ...state, active: true };\n        case \"ADD_BOT\":\n            const addedBot = state.remainingBots.find(bot => bot.id === action.id);\n            const newRemaining = state.remainingBots.filter(bot => bot.id !== action.id);\n            return { ...state, roomBots: [...state.roomBots, addedBot], remainingBots: newRemaining };\n        case \"REMOVE_BOT\":\n            const removedBot = state.roomBots.find(bot => bot.id === action.id);\n            const newRoomBots = state.roomBots.filter(bot => bot.id !== action.id);\n            return { ...state, roomBots: newRoomBots, remainingBots: [...state.remainingBots, removedBot] };\n        case \"NEW_MESSAGE\":\n            return { ...state, transcript: [...state.transcript, action.message] };\n        default:\n            throw new Error(\"unrecognized action type\");\n    }\n}\n\nexport default function Arena() {\n    const classes = useStyles();\n    const scrollContainerRef = useRef(null);\n\n    const [selectedBot, setSelectedBot] = useState(\"\");\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    // Initial load of bots\n    useEffect(() => {\n        // Fetch bots\n        const getBots = async () => {\n            let response = await API.get('/bots');\n            dispatch({\n                type: \"INIT\",\n                bots: response.data\n            });\n        };\n\n        getBots();\n    }, []);\n\n    // Socket listening\n    useEffect(() => {\n        state.ws.onmessage = event => {\n            dispatch(JSON.parse(event.data));\n        };\n    });\n\n\n    // Create room\n    const startRoom = async () => {\n        state.ws.send(JSON.stringify({\n            type: \"START_ROOM\"\n        }));\n        dispatch({ type: \"START_ROOM\" });\n    };\n\n    const addBot = () => {\n        if (selectedBot === \"\")\n            return;\n        let data = {\n            type: \"ADD_BOT\",\n            payload: selectedBot\n        };\n        state.ws.send(JSON.stringify(data));\n        setSelectedBot(\"\");\n    };\n\n    const removeBot = (id) => {\n        state.ws.send(JSON.stringify({\n            type: \"REMOVE_BOT\",\n            payload: id\n        }));\n    };\n\n    const changeSelection = (event) => {\n        setSelectedBot(event.target.value);\n    };\n\n    return (\n        <Grid component={Paper} elevation={3} container item xs={12} className={classes.container}>\n            <Grid container direction=\"column\" item xs={3} className={classes.sideBar}>\n                <Grid item className={classes.select}>\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel>Add a bot</InputLabel>\n                        <Select\n                            variant={'outlined'}\n                            label=\"Add a bot\"\n                            onChange={changeSelection}\n                            value={selectedBot}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {state.remainingBots.map((bot, index) => {\n                                return (\n                                    <MenuItem value={bot.id} key={index}>{bot.name}</MenuItem>\n                                );\n                            })}\n                        </Select>\n                        <Button onClick={addBot} variant={'contained'} color={'secondary'} className={classes.addButton}>Add</Button>\n                    </FormControl>\n                </Grid>\n                <Grid item className={classes.botListContainer}>\n                    <Typography className={classes.currentBotsTitle}>Current Bots</Typography>\n                    <List className={classes.botList}>\n                        {state.roomBots.map((bot, index) => (\n                            <React.Fragment key={index}>\n                                {index !== 0 && <Divider />}\n                                <ListItem>\n                                    <ListItemText primary={bot.name} />\n                                    <ListItemSecondaryAction>\n                                        <Tooltip title=\"Remove\">\n                                            <IconButton onClick={() => removeBot(bot.id)} edge=\"end\" aria-label=\"remove\">\n                                                <Close />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            </React.Fragment>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            <Grid container item xs={9} className={classes.transcriptContainer} ref={scrollContainerRef}>\n                {state.active ? (\n                    <Transcript transcript={state.transcript} scrollContainerRef={scrollContainerRef} />\n                ) : (\n                    <Grid container className={classes.notStartedContainer} item xs={12}>\n                        <Grid item xs={12}>\n                            <p className={classes.notStartedMsg}>Start the room to see messages</p>\n                            <Button onClick={startRoom} variant={'contained'} color={'secondary'}>Start</Button>\n                        </Grid>\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nimport Arena from './Arena';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 30,\n        flexGrow: 1,\n        alignContent: \"flex-start\",\n    },\n    title: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    },\n    fightZone: {\n        flexGrow: 1,\n        padding: 20,\n        height: \"80vh\"\n    }\n}));\n\nexport default function Fight() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <Typography className={classes.title} align={'center'}>WELCOME TO THE DEATH ZONE</Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.fightZone}>\n                <Arena />\n            </Grid>\n        </Grid>\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n        justifyContent: \"space-around\"\n    },\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    feature: {\n        marginTop: 50,\n        flexGrow: 1\n    },\n    button: {\n        margin: \"0 30%\",\n        marginTop: 20,\n        marginBottom: 200,\n        fontSize: 30,\n        padding: \"20px 40px\"\n    }\n}));\n\nexport default function Landing() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={\"center\"}>WELCOME TO CHATBOT WARS</Typography>\n            <div className={classes.container}>\n                <Typography variant={'h6'}>\n                    Build your own chatbot. Watch it crash and burn.\n                </Typography >\n                <Button className={classes.button} size={'large'} variant={'contained'} color={'secondary'} component={RouterLink} to={'/workshop'}>Get Started</Button>\n            </div>\n        </React.Fragment>\n    );\n}\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport API from 'api';\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n    const auth = useProvideAuth();\n    return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n    return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n    // Start as true, and once no user is discovered, routes will be rerendered\n    const [user, setUser] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    // Initial attempt to fetch jwt\n    useEffect(() => {\n        async function fetchData() {\n            let token = localStorage.getItem(\"jwt_token\");\n            if (token != null) {\n                try {\n                    let response = await API.get('/me');\n                    setUser(response.data);\n                } catch (error) {\n                    console.error(error);\n                }\n            } else {\n                setUser(false);\n            }\n            setLoaded(true);\n        }\n\n        fetchData();\n    }, []);\n\n    const register = async (loginData) => {\n        try {\n            let response = await API.post('/users', loginData);\n            return response;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const login = async (username, password) => {\n        try {\n            let response = await API.post('/sessions', {\n                username,\n                password\n            });\n            // Save token in localstorage\n            localStorage.setItem(\"jwt_token\", response.data.token);\n            setUser(response.data.user);\n            return true;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const logout = () => {\n        // Delete token from local storage\n        localStorage.removeItem(\"jwt_token\");\n        setUser(() => false);\n    };\n\n    // Return the user object and auth methods\n    return {\n        user,\n        register,\n        login,\n        logout,\n        loaded\n    };\n}","import { Button, Dialog, DialogActions, DialogTitle, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    confirmButton: {\n        backgroundColor: props => props.color,\n        '&:hover': {\n            backgroundColor: props => props.hoverColor\n        }\n    }\n}));\n\nexport default function ConfirmModal(props) {\n    const { onConfirm, prompt, confirmText, render } = props;\n    const classes = useStyles(props);\n\n    const [open, setOpen] = useState(false);\n\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            {render && render(handleOpen)}\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle >{prompt}</DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\", marginBottom: 10 }}>\n                    <Button autoFocus onClick={handleClose} variant=\"contained\" color=\"primary\">Cancel</Button>\n                    <Button\n                        onClick={handleConfirm}\n                        variant=\"contained\"\n                        className={classes.confirmButton} >{confirmText}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { AppBar, CssBaseline, Divider, Drawer, Hidden, IconButton, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ExitToApp, Menu } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\nimport ConfirmModal from './workshop/edit/ConfirmModal';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        backgroundColor: theme.palette.primary.dark\n    },\n    drawer: {\n        [theme.breakpoints.up('md')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n    dividerColor: {\n        backgroundColor: theme.palette.primary.contrastText\n    },\n    appBarLeft: {\n        width: drawerWidth,\n        flexShrink: 1,\n        fontSize: 30,\n        fontWeight: 500,\n    },\n    appBarRight: {\n        textAlign: \"right\",\n        flexGrow: 1,\n        paddingRight: 20,\n        fontSize: 30,\n    },\n    loginLink: {\n        textDecoration: \"none\",\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    logoutContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-end\",\n        alignItems: \"Center\"\n    },\n    logoutButton: {\n        color: \"white\",\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    drawerHeader: {\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n    },\n    activeNav: {\n        fontWeight: \"bold\",\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main,\n        }\n    },\n    content: {\n        paddingTop: theme.layout.nav.appBarHeight,\n        flexGrow: 1,\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: 'column',\n        overflowX: \"hidden\"\n    },\n}));\n\nexport default function NavMenu({ routes, children }) {\n    const { user, logout, loaded } = useAuth();\n\n    const theme = useTheme();\n    const classes = useStyles();\n    const history = useHistory();\n\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    function signout() {\n        logout();\n        history.push(\"/\");\n    }\n\n    const drawer = (\n        <React.Fragment>\n            <Hidden smDown implementation=\"css\">\n                <Toolbar />\n            </Hidden>\n            <Hidden mdUp implementation=\"css\">\n                <Toolbar className={classes.drawerHeader}>\n                    <Typography variant=\"h5\" align=\"center\">Navigation</Typography>\n                </Toolbar>\n            </Hidden>\n            <Divider variant=\"fullWidth\" />\n            <div className={classes.drawerContainer}>\n                <List>\n                    {Object.values(routes).map((route, index) => (\n                        route.icon && <ListItem\n                            button\n                            exact={route.exact || false}\n                            component={NavLink}\n                            activeClassName={classes.activeNav}\n                            to={route.path}\n                            onClick={() => setDrawerOpen(false)}\n                            key={index}>\n                            <ListItemIcon>\n                                <route.icon />\n                            </ListItemIcon>\n                            <ListItemText primary={route.name} />\n                        </ListItem>\n                    ))}\n                </List>\n            </div>\n        </React.Fragment>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar disableGutters className={classes.headerContainer}>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={() => setDrawerOpen(true)}\n                        className={classes.menuButton}\n                    >\n                        <Menu />\n                    </IconButton>\n                    <Typography className={classes.appBarLeft} variant=\"h4\" align={'center'}>\n                        Chatbot Wars\n                    </Typography>\n                    <div className={classes.appBarRight}>\n                        {user ?\n                            <div className={classes.logoutContainer}>\n                                <Hidden xsDown implementation=\"css\">\n                                    <Typography variant=\"h5\">Hi, {user.username}</Typography>\n                                </Hidden>\n                                <ConfirmModal\n                                    render={open => (\n                                        <IconButton onClick={open} className={classes.logoutButton}>\n                                            <ExitToApp />\n                                        </IconButton>\n                                    )}\n                                    onConfirm={signout}\n                                    prompt={\"Are you sure you want to log out?\"}\n                                    confirmText={\"Logout\"}\n                                    color={theme.palette.secondary.main}\n                                    hoverColor={theme.palette.secondary.dark}\n                                />\n                            </div>\n                            :\n                            <Typography component={NavLink} to={\"/login\"} variant=\"h5\" className={classes.loginLink}>{loaded && \"Login\"}</Typography>\n                        }\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        variant=\"temporary\"\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(false)}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                {children}\n            </main>\n        </div >\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function Finalize() {\n    return (\n        <React.Fragment>\n            <Grid item container spacing={3} alignContent=\"space-around\" style={{ textAlign: \"center\", height: \"100%\" }}>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >That's a good start.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        You can keep working on your bot anytime by going back to the workshop.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        Click 'To Glory' to send your bot to the battlefield!\n                </Typography>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { moods } from 'api';\n\nconst streamErrors = (msgs) => {\n    return msgs.join(\"\\n\");\n};\n\nexport default function LineInput({ autoFocus, error, errorMessages, label, line, updateLine }) {\n\n    const changeText = (event) => {\n        updateLine({ text: event.target.value });\n    };\n\n    const changeSelection = (event) => {\n        updateLine({ mood: event.target.value });\n    };\n\n\n    return (\n        <React.Fragment>\n            <Grid item xs={9}>\n                <FormControl fullWidth>\n                    <TextField autoFocus={autoFocus || false} value={line.text} error={error} helperText={streamErrors(errorMessages)} label={label} variant=\"outlined\" onChange={changeText} />\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} >\n                <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Mood</InputLabel>\n                    <Select\n                        variant={'outlined'}\n                        label=\"Mood\"\n                        onChange={changeSelection}\n                        value={line.mood}\n                    >\n                        {moods.map((mood, index) => {\n                            return (\n                                <MenuItem value={index} key={index}>{mood}</MenuItem>\n                            );\n                        })}\n                    </Select>\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Greeting must be non-empty\";\n\nexport default function Greetings({ value, updateHandler: updateGreetings, setValidator, titleStyle }) {\n    const [greeting, setGreeting] = useState(value[0]);\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n\n\n    const validate = useCallback(\n        () => {\n            let errorMessages = [];\n            const validGreeting = greeting.text.length > 0;\n            if (!validGreeting) {\n                setError(true);\n                errorMessages.push(badLength);\n            }\n            setErrorMsgs(errorMessages);\n            updateGreetings([greeting]);\n            return validGreeting;\n        },\n        [greeting, updateGreetings],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeGreeting = ({ text, mood }) => {\n        setGreeting({\n            text: text !== undefined ? text : greeting.text,\n            mood: mood !== undefined ? mood : greeting.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>What's your bot gonna say prior to embarassing your foes?</Typography>\n            </Grid>\n            <LineInput autoFocus error={error} errorMessages={errorMsgs} label=\"Greeting\" line={greeting} updateLine={changeGreeting} />\n        </React.Fragment>\n    );\n}\n","import { useEffect, useState } from \"react\";\n\n// Delay in milliseconds\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}","import { FormControl, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport API from 'api';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function Name({ value, updateHandler: updateName, setValidator, titleStyle }) {\n    const classes = useStyles();\n\n    const [name, setName] = useState(value);\n    const [error, setError] = useState(\"\");\n\n    const validate = useCallback(\n        async () => {\n            if (!validName(name)) {\n                setError(\"Name must be between 3 and 30 characters\");\n                return false;\n            }\n            // Check unique username\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setError(\"That bot name is taken\");\n                    return false;\n                } else {\n                    setError(\"\");\n                    updateName(name);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            return true;\n        },\n        [name, updateName],\n    );\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName) {\n                    setError(\"That bot name is taken\");\n                } else {\n                    setError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName]);\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setError(\"\");\n        setCheckedName(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>First thing's first, give your bot a name</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl fullWidth>\n                    <TextField\n                        autoFocus\n                        className={error.length === 0 && validName && checkedName ? classes.valid : null}\n                        error={error.length > 0}\n                        helperText={error.length === 0 && validName && checkedName ? \"Valid bot name\" : error}\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        value={name}\n                        onChange={changeName} />\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Question must be non-empty\";\n\nexport default function Questions({ value, updateHandler: updateQuestions, setValidator, titleStyle }) {\n    const [question1, setQuestion1] = useState(value[0]);\n    const [question2, setQuestion2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validQuestion1 = question1.text.length > 0;\n            const validQuestion2 = question2.text.length > 0;\n            if (!validQuestion1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validQuestion2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateQuestions([question1, question2]);\n            return validQuestion1 && validQuestion2;\n        },\n        [question1, question2, updateQuestions],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeQuestion1 = ({ text, mood }) => {\n        setQuestion1({\n            text: text !== undefined ? text : question1.text,\n            mood: mood !== undefined ? mood : question1.mood\n        });\n    };\n\n    const changeQuestion2 = ({ text, mood }) => {\n        setQuestion2({\n            text: text !== undefined ? text : question2.text,\n            mood: mood !== undefined ? mood : question2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Everyone needs a conversation starter</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Question 1\" error={error1} errorMessages={errorMsgs1} line={question1} updateLine={changeQuestion1} />\n            <LineInput label=\"Question 2\" error={error2} errorMessages={errorMsgs2} line={question2} updateLine={changeQuestion2} />\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Response must be non-empty\";\n\nexport default function Responses({ value, updateHandler: updateResponses, setValidator, titleStyle }) {\n    const [response1, setResponse1] = useState(value[0]);\n    const [response2, setResponse2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validResponse1 = response1.text.length > 0;\n            const validResponse2 = response2.text.length > 0;\n            if (!validResponse1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validResponse2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateResponses([response1, response2]);\n            return validResponse1 && validResponse2;\n        },\n        [response1, response2, updateResponses],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeResponse1 = ({ text, mood }) => {\n        setResponse1({\n            text: text !== undefined ? text : response1.text,\n            mood: mood !== undefined ? mood : response1.mood\n        });\n    };\n\n    const changeResponse2 = ({ text, mood }) => {\n        setResponse2({\n            text: text !== undefined ? text : response2.text,\n            mood: mood !== undefined ? mood : response2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Time for some trash talk</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Response 1\" error={error1} errorMessages={errorMsgs1} line={response1} updateLine={changeResponse1} />\n            <LineInput label=\"Response 2\" error={error2} errorMessages={errorMsgs2} line={response2} updateLine={changeResponse2} />\n        </React.Fragment>\n    );\n}\n","import { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'api';\nimport Finalize from 'components/workshop/create/Finalize';\nimport Greetings from 'components/workshop/create/Greetings';\nimport Name from 'components/workshop/create/Name';\nimport Questions from 'components/workshop/create/Questions';\nimport Responses from 'components/workshop/create/Responses';\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: \"flex\",\n        flexDirection: 'column',\n        padding: 20\n    },\n    activeStep: {\n        color: theme.palette.success.light\n    },\n    stepContainer: {\n        padding: 20,\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n    stepContent: {\n        flexGrow: 1,\n        padding: \"0 !important\",\n        alignContent: \"flex-start\"\n    },\n    stepButton: {\n        alignSelf: \"flex-end\",\n        textAlign: \"center\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n    }\n}));\n\n\nexport default function Create() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [completed, setCompleted] = useState(new Set());\n\n    const allStepsCompleted = () => {\n        return completed.size === steps.length;\n    };\n\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        // Check for allowing user to directly advance this far\n        if (completed.has(step)) {\n            setActiveStep(step);\n        }\n    };\n\n    const handleComplete = async () => {\n        const newCompleted = new Set(completed);\n        // Call child validation method\n        let valid = await steps[activeStep].validate();\n        if (!valid) {\n            newCompleted.delete(activeStep);\n            setCompleted(newCompleted);\n            return;\n        }\n\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        if (completed.size !== steps.length) {\n            handleNext();\n        }\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    const lastStep = () => {\n        return activeStep === steps.length - 1;\n    };\n\n    const [botID, setBotID] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [greetings, setGreetings] = useState([\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [questions, setQuestions] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [responses, setResponses] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n\n    const steps = [\n        {\n            title: \"Name\",\n            component: Name,\n            value: name,\n            handler: setName\n        },\n        {\n            title: \"Greetings\",\n            component: Greetings,\n            value: greetings,\n            handler: setGreetings\n        },\n        {\n            title: \"Questions\",\n            component: Questions,\n            value: questions,\n            handler: setQuestions\n        },\n        {\n            title: \"Responses\",\n            component: Responses,\n            value: responses,\n            handler: setResponses\n        },\n        {\n            title: \"Finalize\",\n            component: Finalize,\n            value: name,\n            handler: null,\n            validate: () => true\n        },\n    ];\n\n    const createBot = async () => {\n        const bot = {\n            name: name,\n            greetings: greetings,\n            questions: questions,\n            responses: responses,\n        };\n        console.log(bot);\n\n        let response = await API.post('/bots', bot);\n        // Should log ID here\n        setBotID(response.data.id);\n        console.log(JSON.stringify(response.data));\n    };\n\n\n    return (\n        <div className={classes.root}>\n            {!allStepsCompleted() && (<Stepper alternativeLabel nonLinear activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    return (\n                        <Step active={activeStep === index} key={step.title} {...stepProps}>\n                            <StepButton\n                                disabled={activeStep !== index && !isStepComplete(index)}\n                                onClick={handleStep(index)}\n                                completed={activeStep !== index && isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {step.title}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>)}\n            <Grid container direction={'row'} spacing={3} className={classes.stepContainer}>\n                {allStepsCompleted() ? (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant={'h4'}>\n                                Bot created successfully!\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button to={`/workshop/edit/${botID}`} component={RouterLink} variant={'contained'} color={'secondary'}>See it in the workshop</Button>\n                        </Grid>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <Grid container spacing={3} item xs={12} className={classes.stepContent}>\n                            {React.createElement(\n                                steps[activeStep].component,\n                                {\n                                    value: steps[activeStep].value,\n                                    updateHandler: steps[activeStep].handler,\n                                    setValidator: (validator => steps[activeStep].validate = validator),\n                                    titleStyle: { padding: \"30px 0px\" }\n                                },\n                            )}\n                        </Grid>\n                        <Grid item xs={12} className={classes.stepButton}>\n                            <Button disabled={activeStep === 0} onClick={handleBack} size=\"large\" variant=\"contained\" color=\"secondary\">Back</Button>\n                            {!lastStep() ?\n                                (\n                                    < Button onClick={handleComplete} size=\"large\" variant=\"contained\" color=\"secondary\">Next</Button>\n                                ) : (\n                                    < Button onClick={() => { createBot(); handleComplete(); }} size=\"large\" variant=\"contained\" color=\"secondary\">To Glory</Button>\n                                )\n                            }\n                        </Grid>\n                    </React.Fragment>\n                )}\n            </Grid>\n        </div >\n    );\n}\n","import { Button, CircularProgress, Grid, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport API from 'api';\nimport ConfirmModal from './edit/ConfirmModal';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n    },\n    botsContainer: {\n        paddingTop: 20,\n        alignContent: \"flex-start\"\n    },\n    noBots: {\n        marginTop: \"20%\",\n        marginBottom: 20\n    },\n    tableContainer: {\n        padding: 20\n    },\n    selectBot: {\n        textDecoration: \"none\",\n        color: \"black\",\n        cursor: \"pointer\",\n        '&:hover': {\n            color: \"green\"\n        }\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n    loadingContainer: {\n        alignContent: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n}));\n\n\nexport default function Edit() {\n    const classes = useStyles();\n    const history = useHistory();\n\n\n    const [loading, setLoading] = useState(true);\n    const [bots, setBots] = useState([]);\n\n\n    // Fetch bot data\n    const getBots = useCallback(\n        async () => {\n            let response = await API.get('/users/bots');\n            setBots(response.data);\n            setLoading(false);\n        },\n        [],\n    );\n\n    const selectBot = (id) => {\n        history.push(`/workshop/edit/${id}`);\n    };\n\n    useEffect(() => {\n        getBots();\n    }, [getBots]);\n\n\n    const deleteBot = async (id) => {\n        await API.delete(`/bots/${id}`);\n        getBots();\n    };\n\n    return (\n        <Grid container className={classes.container}>\n            {loading ? (\n                <Grid item xs={12} className={classes.loading}>\n                    <CircularProgress color=\"secondary\" />\n                </Grid >\n            ) : (\n                <Grid container item xs={12} className={classes.botsContainer}>\n                    {bots.length > 0 ? (\n                        <React.Fragment>\n                            <Grid item xs={12} >\n                                <Typography variant={'h5'} align={'center'}>Select a bot to edit</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.tableContainer}>\n                                <TableContainer component={Paper} >\n                                    <Table stickyHeader>\n                                        <colgroup>\n                                            <col style={{ width: '80%' }} />\n                                            <col style={{ width: '20%' }} />\n                                        </colgroup>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell align={'center'}>Delete</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {bots.map((bot, index) => (\n                                                <TableRow key={index} hover>\n                                                    <TableCell className={classes.selectBot} onClick={() => { selectBot(bot.id); }} align={'left'}>\n                                                        {bot.name}\n                                                    </TableCell>\n                                                    <TableCell align={'center'}>\n                                                        <ConfirmModal\n                                                            render={open => (\n                                                                <IconButton onClick={open} className={classes.delete}>\n                                                                    <DeleteIcon />\n                                                                </IconButton>\n                                                            )}\n                                                            onConfirm={() => deleteBot(bot.id)}\n                                                            prompt={\"Are you sure you want to delete this bot?\"}\n                                                            confirmText={\"Delete\"}\n                                                            color={\"red\"}\n                                                            hoverColor={\"darkred\"}\n                                                        />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.noBots}>\n                                <Typography variant={'h4'} align={'center'}>You haven't created any bots</Typography>\n                            </Grid>\n                            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                <Button component={RouterLink} to={\"/workshop/create\"} variant={'contained'} color={'secondary'}>Create a bot</Button>\n                            </Grid>\n                        </React.Fragment>\n                    )\n                    }\n                </Grid>\n            )}\n        </Grid >\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n    },\n    directionText: {\n        fontSize: 24,\n        padding: 20\n    },\n    button: {\n        fontSize: 20,\n        margin: \"auto\",\n        width: \"50%\"\n    }\n}));\n\nexport default function Entrance() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={'center'}>WELCOME TO THE WORKSHOP</Typography>\n            <div className={classes.container}>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Start off by creating a bot\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/create'} size=\"large\" variant=\"contained\" color=\"secondary\">Create</Button>\n                </div>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Or keep working on existing ones\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/edit'} size=\"large\" variant=\"contained\" color=\"secondary\">Edit</Button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, Grid, IconButton, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useState } from 'react';\nimport LineInput from '../create/LineInput';\nimport ConfirmModal from './ConfirmModal';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"70%\"\n    },\n    row: {\n        overflowWrap: 'break-word'\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n}));\n\nconst badLength = \"Question must be non-empty\";\n\n\nexport default function LineTable({ botID, lineType, lines, min, refresh }) {\n    const classes = useStyles();\n    const [line, setLine] = useState({\n        text: \"\",\n        mood: 0\n    });\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n    const [open, setOpen] = useState(false);\n\n\n    const changeLine = ({ text, mood }) => {\n        setLine({\n            text: text !== undefined ? text : line.text,\n            mood: mood !== undefined ? mood : line.mood\n        });\n    };\n\n    const clearInputs = () => {\n        setLine({\n            text: \"\",\n            mood: 0\n        });\n    };\n\n    const validate = () => {\n        setError(false);\n        let errorMessages = [];\n\n        const validText = line.text.length > 0;\n        if (!validText) {\n            errorMessages.push(badLength);\n            setError(true);\n        }\n        setErrorMsgs(errorMessages);\n\n        if (!validText)\n            return;\n        addLine();\n    };\n\n    const addLine = async () => {\n        try {\n            await API.post(`/bots/${botID}/${lineType}`, line);\n            refresh();\n            clearInputs();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const deleteLine = async (index) => {\n        if (lines.length <= min) {\n            setOpen(true);\n            return;\n        }\n        await API.delete(`/bots/${botID}/${lineType}/${index}`);\n        refresh();\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogTitle>\n                    Must have at least {min} {lineType}\n                </DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">OK</Button>\n                </DialogActions>\n            </Dialog>\n            <Grid item xs={12} className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table stickyHeader>\n                        <colgroup>\n                            <col style={{ width: '80%' }} />\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align={'center'}>\n                                    Text\n                        </TableCell>\n                                <TableCell align={'center'}>\n                                    Mood\n                            </TableCell>\n                                <TableCell align={'center'}>\n                                    Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {lines.map((line, index) => (\n                                <TableRow hover key={index} className={classes.row}>\n                                    <TableCell align={'left'}>\n                                        {line.text}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        {moods[line.mood]}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <ConfirmModal\n                                            render={open => (\n                                                <IconButton onClick={open} className={classes.delete}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            )}\n                                            onConfirm={() => deleteLine(index)}\n                                            prompt={\"Are you sure you want to delete this line?\"}\n                                            confirmText={\"Delete\"}\n                                            color={\"red\"}\n                                            hoverColor={\"darkred\"}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid container spacing={3} item xs={12}>\n                <LineInput label={`Add ${lineType.substr(0, -1)}`} error={error} errorMessages={errorMsgs} line={line} updateLine={changeLine} />\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Button onClick={validate} fullWidth size={\"large\"} variant={'contained'} color={'secondary'}>Add</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { AppBar, Button, CircularProgress, FormControl, Grid, List, ListItem, ListItemText, makeStyles, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'api';\nimport LineTable from './LineTable';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    name: {\n        fontSize: 30,\n        fontWeight: 600,\n        textAlign: \"center\",\n        padding: 5.5\n    },\n    tabContainer: {\n        padding: 20,\n        height: \"100%\",\n        flexGrow: 1\n    },\n    generalContainer: {\n        paddingTop: 30,\n        textAlign: \"center\",\n        flexGrow: 1,\n        alignContent: \"flex-start\"\n    },\n    generalSave: {\n        alignSelf: \"flex-end\",\n    },\n    errorList: {\n        textAlign: \"center\",\n        color: \"red\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function BotDetail() {\n    const classes = useStyles();\n    const { id } = useParams();\n\n    const [loading, setLoading] = useState(true);\n    const [tab, setTab] = React.useState(0);\n    const [bot, setBot] = useState({});\n    const [name, setName] = useState(\"\");\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [error, setError] = useState(false);\n\n    // General config\n    const [nameError, setNameError] = useState(\"\");\n\n    const validate = async () => {\n        let errorMsgs = [];\n\n        const validGreetings = bot.greetings.length >= 1;\n        const validQuestions = bot.questions.length >= 2;\n        const validResponses = bot.responses.length >= 2;\n        if (!validName(name)) {\n            setNameError(\"Name must be between 3 and 30 characters\");\n            errorMsgs.push(\"Name must be between 3 and 30 characters\");\n        }\n        if (!validGreetings) {\n            errorMsgs.push(\"Must have at least 1 greeting\");\n        }\n        if (!validQuestions) {\n            errorMsgs.push(\"Must have at least 2 questions\");\n        }\n        if (!validResponses) {\n            errorMsgs.push(\"Must have at least 2 responses\");\n        }\n\n        if (!validName(name) || !validGreetings || !validQuestions || !validResponses) {\n            setErrorMessages(errorMsgs);\n            setError(true);\n            return;\n        }\n\n        if (bot.name !== name) {\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                    updateBot();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        } else {\n            setNameError(\"That's the same name!\");\n        }\n    };\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setNameError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName && currentName !== bot.name) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName, bot.name]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setNameError(\"\");\n        setCheckedName(false);\n    };\n\n    // Fetch bot data\n    const getBotData = useCallback(\n        async () => {\n            let response = await API.get(`/bots/${id}`);\n            setBot(response.data);\n            setName(response.data.name);\n            setLoading(false);\n        },\n        [id],\n    );\n\n    // Fetch bot data\n    const updateBot = async () => {\n        await API.put(`/bots/${id}`, {\n            ...bot,\n            name: name\n        }\n        );\n        getBotData();\n    };\n\n    // Initial load\n    useEffect(() => {\n        getBotData();\n    }, [getBotData]);\n\n    // Tab switching\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n    const showValidName = checkedName && nameError.length === 0 && validName(name) && name !== bot.name;\n\n    return (\n        <React.Fragment>\n            {loading ? (\n                <Grid container style={{ flexGrow: 1 }}>\n                    <Grid item xs={12} className={classes.loading}>\n                        <CircularProgress color=\"secondary\" />\n                    </Grid >\n                </Grid >\n            ) : (\n                <React.Fragment>\n                    <Typography className={classes.name}>\n                        {bot.name}\n                    </Typography>\n                    <AppBar position=\"static\">\n                        <Tabs value={tab} onChange={handleChange} variant={'fullWidth'}>\n                            <Tab label=\"General\" />\n                            <Tab label=\"Greetings\" />\n                            <Tab label=\"Questions\" />\n                            <Tab label=\"Responses\" />\n                        </Tabs>\n                    </AppBar>\n                    <React.Fragment>\n                        <TabPanel value={tab} index={0} className={classes.general}>\n                            <Grid container spacing={3} item xs={12} className={classes.generalContainer}>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth>\n                                        <TextField\n                                            autoFocus\n                                            className={showValidName ? classes.valid : null}\n                                            error={nameError.length > 0}\n                                            helperText={showValidName ? \"Valid bot name\" : nameError}\n                                            label=\"Name\"\n                                            variant=\"outlined\"\n                                            value={name}\n                                            onChange={changeName} />\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                            {error && (\n                                <Grid item xs={12} className={classes.errorList}>\n                                    <List subheader={\"Please fix the following errors\"}>\n                                        {errorMessages.map((msg, index) => (\n                                            <ListItem key={index}>\n                                                <ListItemText primary={msg} className={classes.errorList} />\n                                            </ListItem>\n                                        ))}\n                                    </List>\n                                </Grid>\n                            )}\n                            <Grid item xs={12} className={classes.generalSave}>\n                                <Button onClick={validate} fullWidth size={'large'} variant={'contained'} color={'secondary'}>Save</Button>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={tab} index={1}>\n                            <LineTable botID={bot.id} lineType={\"greetings\"} lines={bot.greetings} min={1} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={2}>\n                            <LineTable botID={bot.id} lineType={\"questions\"} lines={bot.questions} min={2} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={3}>\n                            <LineTable botID={bot.id} lineType={\"responses\"} lines={bot.responses} min={2} refresh={getBotData} />\n                        </TabPanel>\n                    </React.Fragment>\n                </React.Fragment>\n            )\n            } </React.Fragment>\n    );\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            style={{ height: \"100%\" }}\n            {...other}\n        >\n            {value === index && (\n                <Grid container className={classes.tabContainer}>\n                    {children}\n                </Grid>\n            )}\n        </div>\n    );\n}","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Lock, Person } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: \"40vw\",\n        minWidth: 300,\n        margin: \"auto\",\n        padding: 20,\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    icon: {\n        alignSelf: \"center\",\n        fontSize: 44,\n        paddingRight: 10\n    },\n    failed: {\n        color: \"red\",\n        fontSize: 16,\n        padding: 0\n    }\n}));\n\nexport default function Login() {\n    const classes = useStyles();\n    const { login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [failed, setFailed] = useState(false);\n\n\n    const validate = async () => {\n        let newErrors = {\n            username: \"\",\n            password: \"\",\n        };\n        let valid = true;\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryLogin();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryLogin() {\n        try {\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            setFailed(true);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Login to edit your bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        {failed && <Grid item xs={12} className={classes.failed}>\n                            <Typography align={'center'}>Invalid username or password</Typography>\n                        </Grid>}\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Person className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.username.length === 0 && errors.username.length > 0}\n                                helperText={state.username.length === 0 ? errors.username : \"\"}\n                                onChange={event => setState({ ...state, username: event.target.value })}\n                                label=\"Username\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Lock className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\" style={{}}>Log In</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Not registered? <RouterLink to={\"/register\"} className={classes.link}>Click here to create an account</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport API from 'api';\nimport { useAuth } from 'hooks/auth';\nimport useDebounce from 'hooks/debounce';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: \"60vw\",\n        minWidth: 300,\n        margin: \"auto\",\n        padding: 20\n    },\n    formRow: {\n        display: \"flex\",\n        justifyContent: \"space-around\"\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nexport default function Register() {\n    const classes = useStyles();\n    const { register, login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [checkedUsername, setCheckedUsername] = useState(false);\n    const debouncedUsername = useDebounce(state.username, 400);\n\n    // Check unique username\n    useEffect(() => {\n        async function checkUsername(username) {\n            if (username.length === 0)\n                return;\n            try {\n                let response = await API.get(`/unique/users/${username}`);\n                if (!response.data.valid && username === debouncedUsername) {\n                    setErrors(errors => {\n                        return { ...errors, username: \"That username is taken\" };\n                    });\n                } else {\n                    setErrors(errors => {\n                        return { ...errors, username: \"\" };\n                    });\n                }\n                setCheckedUsername(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkUsername(debouncedUsername);\n    }, [debouncedUsername]);\n\n\n    function validate() {\n        let newErrors = {\n            firstName: \"\",\n            lastName: \"\",\n            username: errors.username,\n            password: \"\",\n        };\n        let valid = true;\n        if (state.firstName.length === 0) {\n            newErrors.firstName = \"First name must not be empty\";\n            valid = false;\n        }\n        if (state.lastName.length === 0) {\n            newErrors.lastName = \"Last name must not be empty\";\n            valid = false;\n        }\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryRegister();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryRegister() {\n        try {\n            await register(state);\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Register to create your own bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                error={state.firstName.length === 0 && errors.firstName.length > 0}\n                                helperText={state.firstName.length === 0 ? errors.firstName : \"\"}\n                                onChange={event => setState({ ...state, firstName: event.target.value })}\n                                label=\"First Name\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.lastName.length === 0 && errors.lastName.length > 0}\n                                helperText={state.lastName.length === 0 ? errors.lastName : \"\"}\n                                onChange={event => setState({ ...state, lastName: event.target.value })}\n                                label=\"Last Name\" variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                className={errors.username.length === 0 && state.username.length > 0 && checkedUsername ? classes.valid : null}\n                                error={errors.username.length > 0}\n                                helperText={errors.username.length === 0 && state.username.length !== 0 && checkedUsername ? \"Valid username\" : errors.username}\n                                onChange={event => {\n                                    setState({ ...state, username: event.target.value });\n                                    setErrors({ ...errors, username: \"\" });\n                                    setCheckedUsername(false);\n                                }}\n                                label=\"Username\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\">Register</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Already a user? <RouterLink to={\"/login\"} className={classes.link}>Click here to login</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import Workshop from 'components/workshop/Workshop';\nimport Fight from 'components/fight/Fight';\nimport Home from \"components/Home\";\nimport NavMenu from 'components/NavMenu';\nimport React from \"react\";\nimport {\n    HashRouter as Router,\n    Redirect,\n    Route, Switch\n} from \"react-router-dom\";\nimport { Home as HomeIcon, Build, Forum } from '@material-ui/icons';\nimport Create from 'components/workshop/Create';\nimport Edit from 'components/workshop/Edit';\nimport Entrance from 'components/workshop/Entrance';\nimport BotDetail from 'components/workshop/edit/BotDetail';\nimport Login from 'components/auth/Login';\nimport Register from 'components/auth/Register';\nimport { useAuth } from 'hooks/auth';\n\n\nexport const routes = {\n    \"/\": {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        exact: true,\n        icon: HomeIcon\n    },\n    \"/workshop\": {\n        name: \"Workshop\",\n        path: \"/workshop\",\n        component: Workshop,\n        icon: Build,\n        routes: [\n            {\n                path: \"/\",\n                component: Entrance,\n                auth: false\n            },\n            {\n                path: \"/create\",\n                component: Create,\n                auth: true\n            },\n            {\n                path: \"/edit\",\n                component: Edit,\n                auth: true\n            },\n            {\n                path: \"/edit/:id\",\n                component: BotDetail,\n                auth: true\n            }\n        ]\n    },\n    \"/fight\": {\n        name: \"Fight\",\n        path: \"/fight\",\n        component: Fight,\n        icon: Forum\n    },\n    \"/login\": {\n        name: \"Login\",\n        path: \"/login\",\n        component: Login,\n        noAuth: true\n    },\n    \"/register\": {\n        name: \"Register\",\n        path: \"/register\",\n        component: Register,\n        noAuth: true\n    }\n};\n\nexport default function App() {\n    return (\n        <Router>\n            <NavMenu routes={routes}>\n                <Switch>\n                    {Object.values(routes).map((route, i) => {\n                        if (route.auth) {\n                            return (\n                                <PrivateRoute exact={route.exact || false} path={route.path} key={i}>\n                                    <route.component routes={route.routes} />\n                                </PrivateRoute>\n                            );\n                        } else {\n                            if (route.noAuth) {\n                                return (\n                                    <NoAuthRoute exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </NoAuthRoute>\n                                );\n                            } else {\n                                return (\n                                    <Route exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </Route>\n                                );\n                            }\n                        }\n                    })}\n                    <Route path=\"*\"\n                        render={({ location }) =>\n                            <Redirect\n                                to={{\n                                    pathname: \"/\",\n                                    state: { from: location }\n                                }}\n                            />\n                        }\n                    />\n                </Switch>\n            </NavMenu>\n        </Router>\n    );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nexport function PrivateRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\n// Only available if not logged in (login/register)\nexport function NoAuthRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    <Redirect\n                        to={{\n                            pathname: \"/\",\n                        }}\n                    />\n                ) : (\n                    children\n                )\n            }\n        />\n    );\n}","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { PrivateRoute } from 'Router';\n\n\nexport default function Workshop({ routes }) {\n    const { path } = useRouteMatch();\n\n    return (\n        <React.Fragment>\n            <Switch>\n                {routes.map((route, i) => {\n                    if (route.auth) {\n                        return (\n                            <PrivateRoute exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </PrivateRoute>\n                        );\n                    } else {\n                        return (\n                            <Route exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </Route>\n                        );\n                    }\n                })}\n            </Switch>\n        </React.Fragment>\n    );\n}\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { brown, amber } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: brown[300],\n            main: brown[600],\n            dark: brown[900],\n            contrastText: '#fff',\n        },\n        secondary: {\n            light: amber[500],\n            main: amber[600],\n            dark: amber[800],\n            contrastText: '#000',\n        },\n    },\n    layout: {\n        nav: {\n            appBarHeight: 64\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport Router from './Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'theme';\nimport { ProvideAuth } from \"hooks/auth\";\n\n\nexport default function App() {\n    return (\n        <ProvideAuth>\n            <ThemeProvider theme={theme}>\n                <Router />\n            </ThemeProvider>\n        </ProvideAuth>\n\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}