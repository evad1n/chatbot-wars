{"version":3,"sources":["api.js","components/Transcript.jsx","components/Arena.jsx","components/Fight.jsx","components/Home.jsx","components/NavMenu.jsx","components/workshop/create/Finalize.jsx","components/workshop/create/LineInput.jsx","components/workshop/create/Greetings.jsx","components/workshop/create/Name.jsx","components/workshop/create/Questions.jsx","components/workshop/create/Responses.jsx","components/workshop/Create.jsx","components/workshop/edit/ConfirmModal.jsx","components/workshop/Edit.jsx","components/workshop/Entrance.jsx","components/workshop/edit/LineTable.jsx","components/workshop/edit/BotDetail.jsx","Router.jsx","components/workshop/Workshop.jsx","theme.js","App.jsx","reportWebVitals.js","index.js"],"names":["API","require","default","create","baseURL","moods","useStyles","makeStyles","theme","container","flexGrow","maxHeight","line","display","name","fontWeight","Transcript","roomHash","scrollContainerRef","classes","scrollRef","useRef","useState","transcript","setTranscript","useEffect","el","current","scrollHeight","clientHeight","scrollTop","scrollIntoView","behaviour","length","interval","setInterval","a","get","response","data","clearInterval","delete","Box","className","List","ListItem","ListItemText","primary","map","msg","index","Fragment","ref","text","mood","Divider","height","border","sideBar","borderRight","alignContent","select","padding","borderBottom","addButton","marginTop","notStartedContainer","textAlign","justifyContent","notStartedMsg","fontSize","transcriptContainer","overflow","Arena","bots","setBots","roomBots","setRoomBots","setRoomHash","selectedBot","setSelectedBot","active","setActive","startRoom","post","hash","b","put","id","getBots","Grid","component","Paper","item","xs","FormControl","variant","fullWidth","InputLabel","Select","label","onChange","event","target","value","MenuItem","bot","Button","onClick","newBot","some","color","ListSubheader","style","paddingTop","title","fightZone","flex","flexDirection","marginBottom","feature","button","margin","root","appBar","zIndex","drawer","backgroundColor","palette","dark","appBarLeft","width","flexShrink","appBarRight","paddingLeft","drawerPaper","drawerContainer","activeNav","secondary","contrastText","main","content","layout","nav","appBarHeight","overflowX","NavMenu","routes","children","setTitle","location","useLocation","basePath","pathname","split","CssBaseline","AppBar","position","Toolbar","disableGutters","Typography","align","noWrap","orientation","flexItem","Drawer","paper","Object","values","route","exact","NavLink","activeClassName","to","path","ListItemIcon","icon","Finalize","spacing","LineInput","msgs","autoFocus","error","errorMessages","updateLine","TextField","helperText","join","Greetings","updateGreetings","updateHandler","setValidator","titleStyle","greeting","setGreeting","setError","errorMsgs","setErrorMsgs","validate","useCallback","validGreeting","push","undefined","Name","updateName","setName","validName","badLength","Questions","updateQuestions","question1","setQuestion1","question2","setQuestion2","error1","setError1","error2","setError2","errorMsgs1","setErrorMsgs1","errorMsgs2","setErrorMsgs2","errorMessages1","errorMessages2","validQuestion1","validQuestion2","Responses","updateResponses","response1","setResponse1","response2","setResponse2","validResponse1","validResponse2","activeStep","success","light","stepContainer","stepContent","stepButton","alignSelf","ConfirmModal","onConfirm","type","open","setOpen","handleClose","IconButton","Dialog","onClose","DialogTitle","DialogActions","botsContainer","noBots","tableContainer","selectBot","textDecoration","cursor","loadingContainer","loading","directions","row","overflowWrap","LineTable","botID","lineType","lines","min","refresh","setLine","addLine","console","deleteLine","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","hover","substr","validText","size","tabContainer","generalContainer","generalSave","errorList","TabPanel","props","other","role","hidden","RouterLink","HomeIcon","i","Build","direction","setActiveStep","Set","completed","setCompleted","allStepsCompleted","steps","handleStep","step","has","handleComplete","newCompleted","add","isStepComplete","setBotID","greetings","setGreetings","questions","setQuestions","responses","setResponses","handler","createBot","log","JSON","stringify","Stepper","alternativeLabel","nonLinear","Step","StepButton","disabled","React","createElement","validator","setLoading","history","useHistory","deleteBot","CircularProgress","tab","setTab","setBot","useParams","setErrorMessages","nameError","setNameError","getBotData","updateBot","Tabs","newValue","Tab","general","subheader","validGreetings","validQuestions","validResponses","Forum","App","render","createMuiTheme","brown","amber","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c1140ce.chunk.js","sourcesContent":["const { default: axios } = require(\"axios\");\n\nconst API = axios.create({\n    baseURL: \"/api\"\n});\n\nconst moods = [\n    \"Happy\",\n    \"Angry\",\n    \"Sad\"\n];\n\nexport { moods };\n\n\nexport default API;","import { Box, Divider, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        maxHeight: \"100%\",\n    },\n    line: {\n        display: \"flex\"\n    },\n    name: {\n        fontWeight: 700\n    }\n}));\n\nexport default function Transcript({ roomHash, scrollContainerRef }) {\n    const classes = useStyles();\n    const scrollRef = useRef(null);\n\n    const [transcript, setTranscript] = useState([]);\n\n    // Autoscroll\n    useEffect(() => {\n        const el = scrollContainerRef.current;\n        if (scrollRef.current && (el.scrollHeight - el.clientHeight) - el.scrollTop < 80) {\n            scrollRef.current.scrollIntoView({ behaviour: \"smooth\" });\n        }\n    }, [transcript.length, scrollContainerRef]);\n\n    // Set timer loop for getting lines\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            let response = await API.get(`/rooms/${roomHash}`);\n            setTranscript(response.data);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n            // Delete room on leave\n            API.delete(`/rooms/${roomHash}`);\n        };\n    }, [roomHash]);\n\n    return (\n        <Box className={classes.container}>\n            <List>\n                {transcript.length === 0 ?\n                    <ListItem>\n                        <ListItemText primary={\"Waiting for messages...\"} />\n                    </ListItem>\n                    :\n                    transcript.map((msg, index) => (\n                        <React.Fragment key={index}>\n                            <ListItem ref={index === transcript.length - 1 ? scrollRef : null}>\n                                <Box className={\"MuiListItemText-root MuiListItemText-multiline\"}>\n                                    <p className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\"}><strong>{msg.name}</strong>: {msg.line.text}</p>\n                                    <p className={\"MuiTypography-root MuiListItemText-secondary MuiTypography-body2 MuiTypography-colorTextSecondary MuiTypography-displayBlock\"}>{moods[msg.line.mood]}</p>\n                                </Box>\n                            </ListItem>\n                            {index !== transcript.length - 1 && <Divider />}\n                        </React.Fragment>\n                    ))\n                }\n            </List>\n        </Box>\n    );\n}\n","import { Button, FormControl, Grid, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Paper, Select } from '@material-ui/core';\nimport API from 'api';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Transcript from './Transcript';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        height: \"100%\",\n        border: \"1px solid #bbb\"\n    },\n    sideBar: {\n        borderRight: \"1px solid grey\",\n        alignContent: \"flex-start\"\n    },\n    select: {\n        padding: 10,\n        borderBottom: \"1px solid grey\",\n    },\n    addButton: {\n        marginTop: 5\n    },\n    notStartedContainer: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    notStartedMsg: {\n        textAlign: \"center\",\n        fontSize: 20\n    },\n    transcriptContainer: {\n        overflow: 'auto',\n        maxHeight: \"100%\"\n    }\n}));\n\nexport default function Arena() {\n    const classes = useStyles();\n    const scrollContainerRef = useRef(null);\n\n\n    const [bots, setBots] = useState([]);\n    const [roomBots, setRoomBots] = useState([]);\n    const [roomHash, setRoomHash] = useState(\"\");\n    const [selectedBot, setSelectedBot] = useState(\"\");\n    const [active, setActive] = useState(false);\n\n    // Create room\n    const startRoom = async () => {\n        let response = await API.post(`/rooms`);\n        setRoomHash(response.data.hash);\n        // Add all bots to room\n        for (const b of roomBots) {\n            await API.put(`/rooms/${response.data.hash}/${b.id}`);\n        }\n        setActive(true);\n    };\n\n    // Initial load of bots\n    useEffect(() => {\n        // Fetch bots\n        const getBots = async () => {\n            let response = await API.get('/bots');\n            setBots(response.data);\n        };\n\n        getBots();\n    }, [roomHash]);\n\n    const addBot = () => {\n        if (selectedBot === \"\")\n            return;\n        let newBot = bots[selectedBot];\n        // Check if already in\n        if (roomBots.some(bot => bot.id === newBot.id)) {\n            return;\n        }\n        if (active) {\n            API.put(`/rooms/${roomHash}/${newBot.id}`);\n        }\n        // Add bot ID to selected bots\n        setRoomBots([...roomBots, {\n            name: newBot.name,\n            id: newBot.id\n        }]);\n    };\n\n    const changeSelection = (event) => {\n        setSelectedBot(event.target.value);\n    };\n\n    return (\n        <Grid component={Paper} container item xs={12} className={classes.container}>\n            <Grid container item xs={3} className={classes.sideBar}>\n                <Grid item xs={12} className={classes.select}>\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel>Add a bot</InputLabel>\n                        <Select\n                            variant={'outlined'}\n                            label=\"Add a bot\"\n                            onChange={changeSelection}\n                            value={selectedBot}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {bots.map((bot, index) => {\n                                return (\n                                    <MenuItem value={index} key={index}>{bot.name}</MenuItem>\n                                );\n                            })}\n                        </Select>\n                        <Button onClick={addBot} variant={'contained'} color={'secondary'} className={classes.addButton}>Add</Button>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    <List>\n                        <ListSubheader style={{ textAlign: \"center\" }}>Current Bots</ListSubheader>\n                        {roomBots.map((bot, index) => (\n                            <ListItem key={index}>\n                                <ListItemText primary={bot.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            <Grid container item xs={9} className={classes.transcriptContainer} ref={scrollContainerRef}>\n                {active ? (\n                    <Transcript roomHash={roomHash} scrollContainerRef={scrollContainerRef} />\n                ) : (\n                    <Grid container className={classes.notStartedContainer} item xs={12}>\n                        <Grid item xs={12}>\n                            <p className={classes.notStartedMsg}>Start the room to see messages</p>\n                            <Button onClick={startRoom} variant={'contained'} color={'secondary'}>Start</Button>\n                        </Grid>\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nimport Arena from './Arena';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 30,\n        flexGrow: 1,\n        alignContent: \"flex-start\",\n    },\n    title: {\n        fontSize: 30,\n    },\n    fightZone: {\n        flexGrow: 1,\n        padding: 20,\n        height: \"80vh\"\n    }\n}));\n\nexport default function Fight() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <Typography className={classes.title} align={'center'}>WELCOME TO THE DEATH ZONE</Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.fightZone}>\n                <Arena />\n            </Grid>\n        </Grid>\n    );\n}\n","import { Button, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flex: 1,\n        flexDirection: \"column\",\n        fontSize: 30,\n        textAlign: \"center\",\n        justifyContent: \"space-around\"\n    },\n    title: {\n        marginTop: 30,\n        marginBottom: 50\n    },\n    feature: {\n        marginTop: 50,\n        flexGrow: 1\n    },\n    button: {\n        margin: \"0 10%\",\n        marginTop: 20,\n        marginBottom: 200,\n        fontSize: 30,\n        padding: \"20px 40px\"\n    }\n}));\n\nexport default function Landing() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Typography className={classes.title} variant={'h4'}>WELCOME TO CHATBOT WARS</Typography>\n            <Typography variant={'h6'}>\n                Build your own chatbot. Watch it crash and burn.\n            </Typography >\n            <Button className={classes.button} size={'large'} variant={'contained'} color={'secondary'} component={RouterLink} to={'/workshop'}>Get Started</Button>\n        </Grid>\n    );\n}\n","import { AppBar, CssBaseline, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        backgroundColor: theme.palette.primary.dark\n    },\n    appBarLeft: {\n        width: drawerWidth,\n        flexShrink: 1,\n        fontSize: 30,\n        fontWeight: 500,\n    },\n    appBarRight: {\n        flexGrow: 1,\n        paddingLeft: 20,\n        fontSize: 30,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    activeNav: {\n        fontWeight: \"bold\",\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main,\n        }\n    },\n    content: {\n        paddingTop: theme.layout.nav.appBarHeight,\n        flexGrow: 1,\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: 'column',\n        overflowX: \"hidden\"\n    },\n}));\n\nexport default function NavMenu({ routes, children }) {\n    const classes = useStyles();\n    const [title, setTitle] = useState(\"Home\");\n    // Match base path title \n    let location = useLocation();\n    useEffect(() => {\n        let basePath = \"/\" + location.pathname.split(\"/\")[1];\n        setTitle(routes[basePath].name);\n        return () => {\n        };\n    }, [location, routes, title]);\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar disableGutters>\n                    <Typography className={classes.appBarLeft} variant=\"h4\" align={'center'} noWrap>\n                        Chatbot Wars\n                    </Typography>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Typography className={classes.appBarRight} variant=\"h5\" align={'center'}>{title}</Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        {Object.values(routes).map((route, index) => (\n                            <ListItem\n                                button\n                                exact={route.exact || false}\n                                component={NavLink}\n                                activeClassName={classes.activeNav}\n                                to={route.path}\n                                key={index}>\n                                <ListItemIcon>\n                                    <route.icon />\n                                </ListItemIcon>\n                                <ListItemText primary={route.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Drawer>\n            <main className={classes.content}>\n                {children}\n            </main>\n        </div>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function Finalize() {\n    return (\n        <React.Fragment>\n            <Grid item container spacing={3} alignContent=\"space-around\" style={{ textAlign: \"center\", height: \"100%\" }}>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >That's a good start.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        You can keep working on your bot anytime by going back to the workshop.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        Click 'To Glory' to send your bot to the battlefield!\n                </Typography>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { moods } from 'api';\n\nconst streamErrors = (msgs) => {\n    return msgs.join(\"\\n\");\n};\n\nexport default function LineInput({ autoFocus, error, errorMessages, label, line, updateLine }) {\n\n    const changeText = (event) => {\n        updateLine({ text: event.target.value });\n    };\n\n    const changeSelection = (event) => {\n        updateLine({ mood: event.target.value });\n    };\n\n\n    return (\n        <React.Fragment>\n            <Grid item xs={9}>\n                <FormControl fullWidth>\n                    <TextField autoFocus={autoFocus || false} value={line.text} error={error} helperText={streamErrors(errorMessages)} label={label} variant=\"outlined\" onChange={changeText} />\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} >\n                <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Mood</InputLabel>\n                    <Select\n                        variant={'outlined'}\n                        label=\"Mood\"\n                        onChange={changeSelection}\n                        value={line.mood}\n                    >\n                        {moods.map((mood, index) => {\n                            return (\n                                <MenuItem value={index} key={index}>{mood}</MenuItem>\n                            );\n                        })}\n                    </Select>\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Greeting must be non-empty\";\n\nexport default function Greetings({ value, updateHandler: updateGreetings, setValidator, titleStyle }) {\n    const [greeting, setGreeting] = useState(value[0]);\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n\n\n    const validate = useCallback(\n        () => {\n            let errorMessages = [];\n            const validGreeting = greeting.text.length > 0;\n            if (!validGreeting) {\n                setError(true);\n                errorMessages.push(badLength);\n            }\n            setErrorMsgs(errorMessages);\n            updateGreetings([greeting]);\n            return validGreeting;\n        },\n        [greeting, updateGreetings],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeGreeting = ({ text, mood }) => {\n        setGreeting({\n            text: text !== undefined ? text : greeting.text,\n            mood: mood !== undefined ? mood : greeting.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>What's your bot gonna say prior to embarassing your foes?</Typography>\n            </Grid>\n            <LineInput autoFocus error={error} errorMessages={errorMsgs} label=\"Greeting\" line={greeting} updateLine={changeGreeting} />\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, TextField, Typography } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nconst badLength = \"Name must be between 3 and 30 characters\";\n\nexport default function Name({ value, updateHandler: updateName, setValidator, titleStyle }) {\n    const [name, setName] = useState(value);\n    const [error, setError] = useState(false);\n\n    const validate = useCallback(\n        () => {\n            const validName = name.length >= 3 && name.length <= 30;\n            if (!validName) {\n                setError(true);\n            } else {\n                updateName(name);\n            }\n            return validName;\n        },\n        [name, updateName],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>First thing's first, give your bot a name</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl fullWidth>\n                    <TextField autoFocus error={error} helperText={error ? badLength : \"\"} label=\"Name\" variant=\"outlined\" value={name} onChange={changeName} />\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Question must be non-empty\";\n\nexport default function Questions({ value, updateHandler: updateQuestions, setValidator, titleStyle }) {\n    const [question1, setQuestion1] = useState(value[0]);\n    const [question2, setQuestion2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validQuestion1 = question1.text.length > 0;\n            const validQuestion2 = question2.text.length > 0;\n            if (!validQuestion1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validQuestion2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateQuestions([question1, question2]);\n            return validQuestion1 && validQuestion2;\n        },\n        [question1, question2, updateQuestions],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeQuestion1 = ({ text, mood }) => {\n        setQuestion1({\n            text: text !== undefined ? text : question1.text,\n            mood: mood !== undefined ? mood : question1.mood\n        });\n    };\n\n    const changeQuestion2 = ({ text, mood }) => {\n        setQuestion2({\n            text: text !== undefined ? text : question2.text,\n            mood: mood !== undefined ? mood : question2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Everyone needs a conversation starter</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Question 1\" error={error1} errorMessages={errorMsgs1} line={question1} updateLine={changeQuestion1} />\n            <LineInput label=\"Question 2\" error={error2} errorMessages={errorMsgs2} line={question2} updateLine={changeQuestion2} />\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Response must be non-empty\";\n\nexport default function Responses({ value, updateHandler: updateResponses, setValidator, titleStyle }) {\n    const [response1, setResponse1] = useState(value[0]);\n    const [response2, setResponse2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validResponse1 = response1.text.length > 0;\n            const validResponse2 = response2.text.length > 0;\n            if (!validResponse1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validResponse2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateResponses([response1, response2]);\n            return validResponse1 && validResponse2;\n        },\n        [response1, response2, updateResponses],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeResponse1 = ({ text, mood }) => {\n        setResponse1({\n            text: text !== undefined ? text : response1.text,\n            mood: mood !== undefined ? mood : response1.mood\n        });\n    };\n\n    const changeResponse2 = ({ text, mood }) => {\n        setResponse2({\n            text: text !== undefined ? text : response2.text,\n            mood: mood !== undefined ? mood : response2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Time for some trash talk</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Response 1\" error={error1} errorMessages={errorMsgs1} line={response1} updateLine={changeResponse1} />\n            <LineInput label=\"Response 2\" error={error2} errorMessages={errorMsgs2} line={response2} updateLine={changeResponse2} />\n        </React.Fragment>\n    );\n}\n","import { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'api';\nimport Finalize from 'components/workshop/create/Finalize';\nimport Greetings from 'components/workshop/create/Greetings';\nimport Name from 'components/workshop/create/Name';\nimport Questions from 'components/workshop/create/Questions';\nimport Responses from 'components/workshop/create/Responses';\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: \"flex\",\n        flexDirection: 'column',\n        padding: 20\n    },\n    activeStep: {\n        color: theme.palette.success.light\n    },\n    stepContainer: {\n        padding: 20,\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n    stepContent: {\n        flexGrow: 1,\n        padding: \"0 !important\",\n        alignContent: \"flex-start\"\n    },\n    stepButton: {\n        alignSelf: \"flex-end\",\n        textAlign: \"center\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n    }\n}));\n\n\nexport default function Create() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [completed, setCompleted] = useState(new Set());\n\n    const allStepsCompleted = () => {\n        return completed.size === steps.length;\n    };\n\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        // Check for allowing user to directly advance this far\n        if (completed.has(step)) {\n            setActiveStep(step);\n        }\n    };\n\n    const handleComplete = () => {\n        const newCompleted = new Set(completed);\n        // Call child validation method\n        if (!steps[activeStep].validate()) {\n            newCompleted.delete(activeStep);\n            setCompleted(newCompleted);\n            return;\n        }\n\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        if (completed.size !== steps.length) {\n            handleNext();\n        }\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    const lastStep = () => {\n        return activeStep === steps.length - 1;\n    };\n\n    const [botID, setBotID] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [greetings, setGreetings] = useState([\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [questions, setQuestions] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [responses, setResponses] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n\n    const steps = [\n        {\n            title: \"Name\",\n            component: Name,\n            value: name,\n            handler: setName\n        },\n        {\n            title: \"Greetings\",\n            component: Greetings,\n            value: greetings,\n            handler: setGreetings\n        },\n        {\n            title: \"Questions\",\n            component: Questions,\n            value: questions,\n            handler: setQuestions\n        },\n        {\n            title: \"Responses\",\n            component: Responses,\n            value: responses,\n            handler: setResponses\n        },\n        {\n            title: \"Finalize\",\n            component: Finalize,\n            value: name,\n            handler: null,\n            validate: () => true\n        },\n    ];\n\n    const createBot = async () => {\n        const bot = {\n            name: name,\n            greetings: greetings,\n            questions: questions,\n            responses: responses,\n        };\n        console.log(bot);\n\n        let response = await API.post('/bots', bot);\n        // Should log ID here\n        setBotID(response.data.id);\n        console.log(JSON.stringify(response.data));\n    };\n\n\n    return (\n        <div className={classes.root}>\n            {!allStepsCompleted() && (<Stepper alternativeLabel nonLinear activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    return (\n                        <Step active={activeStep === index} key={step.title} {...stepProps}>\n                            <StepButton\n                                disabled={activeStep !== index && !isStepComplete(index)}\n                                onClick={handleStep(index)}\n                                completed={activeStep !== index && isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {step.title}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>)}\n            <Grid container direction={'row'} spacing={3} className={classes.stepContainer}>\n                {allStepsCompleted() ? (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant={'h4'}>\n                                Bot created successfully!\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button to={`/workshop/edit/${botID}`} component={RouterLink} variant={'contained'} color={'secondary'}>See it in the workshop</Button>\n                        </Grid>\n                    </React.Fragment>\n                ) : (\n                        <React.Fragment>\n                            <Grid container spacing={3} item xs={12} className={classes.stepContent}>\n                                {React.createElement(\n                                    steps[activeStep].component,\n                                    {\n                                        value: steps[activeStep].value,\n                                        updateHandler: steps[activeStep].handler,\n                                        setValidator: (validator => steps[activeStep].validate = validator),\n                                        titleStyle: { padding: \"30px 0px\" }\n                                    },\n                                )}\n                            </Grid>\n                            <Grid item xs={12} className={classes.stepButton}>\n                                <Button disabled={activeStep === 0} onClick={handleBack} size=\"large\" variant=\"contained\" color=\"secondary\">Back</Button>\n                                {!lastStep() ?\n                                    (\n                                        < Button onClick={handleComplete} size=\"large\" variant=\"contained\" color=\"secondary\">Next</Button>\n                                    ) : (\n                                        < Button onClick={() => { createBot(); handleComplete(); }} size=\"large\" variant=\"contained\" color=\"secondary\">To Glory</Button>\n                                    )\n                                }\n                            </Grid>\n                        </React.Fragment>\n                    )}\n            </Grid>\n        </div >\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, IconButton, makeStyles } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles({\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    }\n});\n\nexport default function ConfirmModal({ onConfirm, type }) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <IconButton className={classes.delete} onClick={handleOpen}>\n                <DeleteIcon />\n            </IconButton>\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle >Are you sure you want to delete this {type}?</DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">Cancel</Button>\n                    <Button onClick={handleConfirm} color=\"primary\" className={classes.delete}>Delete</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { Button, CircularProgress, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport API from 'api';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport ConfirmModal from './edit/ConfirmModal';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n    },\n    botsContainer: {\n        paddingTop: 20,\n        alignContent: \"flex-start\"\n    },\n    noBots: {\n        marginTop: \"20%\",\n        marginBottom: 20\n    },\n    tableContainer: {\n        padding: 20\n    },\n    selectBot: {\n        textDecoration: \"none\",\n        color: \"black\",\n        cursor: \"pointer\",\n        '&:hover': {\n            color: \"green\"\n        }\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n    loadingContainer: {\n        alignContent: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    }\n}));\n\n\nexport default function Edit() {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(true);\n    const [bots, setBots] = useState([]);\n\n    const history = useHistory();\n\n    // Fetch bot data\n    const getBots = useCallback(\n        async () => {\n            let response = await API.get('/bots');\n            setBots(response.data);\n            setLoading(false);\n        },\n        [],\n    );\n\n    const selectBot = (id) => {\n        history.push(`/workshop/edit/${id}`);\n    };\n\n    useEffect(() => {\n        getBots();\n    }, [getBots]);\n\n\n    const deleteBot = async (id) => {\n        await API.delete(`/bots/${id}`);\n        getBots();\n    };\n\n    return (\n        <Grid container className={classes.container}>\n            {loading ? (\n                <Grid item xs={12} className={classes.loading}>\n                    <CircularProgress color=\"secondary\" />\n                </Grid >\n            ) : (\n                <Grid container item xs={12} className={classes.botsContainer}>\n                    {bots.length > 0 ? (\n                        <React.Fragment>\n                            <Grid item xs={12} >\n                                <Typography variant={'h5'} align={'center'}>Select a bot to edit</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.tableContainer}>\n                                <TableContainer component={Paper} >\n                                    <Table stickyHeader>\n                                        <colgroup>\n                                            <col style={{ width: '80%' }} />\n                                            <col style={{ width: '20%' }} />\n                                        </colgroup>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell align={'center'}>Delete</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {bots.map((bot, index) => (\n                                                <TableRow key={index} hover>\n                                                    <TableCell className={classes.selectBot} onClick={() => { selectBot(bot.id); }} align={'left'}>\n                                                        {bot.name}\n                                                    </TableCell>\n                                                    <TableCell align={'center'}>\n                                                        <ConfirmModal onConfirm={() => deleteBot(bot.id)} type={\"bot\"} />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.noBots}>\n                                <Typography variant={'h4'} align={'center'}>You haven't created any bots</Typography>\n                            </Grid>\n                            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                <Button component={RouterLink} to={\"/workshop/create\"} variant={'contained'} color={'secondary'}>Create a bot</Button>\n                            </Grid>\n                        </React.Fragment>\n                    )\n                    }\n                </Grid>\n            )}\n        </Grid >\n    );\n}\n","import { Button, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        padding: \"10%\",\n        fontSize: 40\n    },\n    directions: {\n        fontSize: 20\n    }\n}));\n\nexport default function Entrance() {\n    const classes = useStyles();\n\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={3} direction={'row'}>\n                <Grid item xs={12} >\n                    <Typography className={classes.title} align={'center'}>WELCOME TO THE WORKSHOP</Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography className={classes.directions} align={'center'}>Start off by creating a bot</Typography>\n                </Grid>\n                <Grid item xs={5} style={{ margin: \"auto\" }}>\n                    <Button component={RouterLink} to={'/workshop/create'} style={{ fontSize: 20 }} fullWidth size=\"large\" variant=\"contained\" color=\"secondary\">Create</Button>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography className={classes.directions} align={'center'}>Or keep working on existing ones</Typography>\n                </Grid>\n                <Grid item xs={5} style={{ margin: \"auto\" }}>\n                    <Button component={RouterLink} to={'/workshop/edit'} style={{ fontSize: 20 }} fullWidth size=\"large\" variant=\"contained\" color=\"secondary\">Edit</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, Grid, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useState } from 'react';\nimport LineInput from '../create/LineInput';\nimport ConfirmModal from './ConfirmModal';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"70%\"\n    },\n    row: {\n        overflowWrap: 'break-word'\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n}));\n\nconst badLength = \"Question must be non-empty\";\n\n\nexport default function LineTable({ botID, lineType, lines, min, refresh }) {\n    const classes = useStyles();\n    const [line, setLine] = useState({\n        text: \"\",\n        mood: 0\n    });\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n    const [open, setOpen] = useState(false);\n\n\n    const changeLine = ({ text, mood }) => {\n        setLine({\n            text: text !== undefined ? text : line.text,\n            mood: mood !== undefined ? mood : line.mood\n        });\n    };\n\n    const clearInputs = () => {\n        setLine({\n            text: \"\",\n            mood: 0\n        });\n    };\n\n    const validate = () => {\n        setError(false);\n        let errorMessages = [];\n\n        const validText = line.text.length > 0;\n        if (!validText) {\n            errorMessages.push(badLength);\n            setError(true);\n        }\n        setErrorMsgs(errorMessages);\n\n        if (!validText)\n            return;\n        addLine();\n    };\n\n    const addLine = async () => {\n        try {\n            await API.post(`/bots/${botID}/${lineType}`, line);\n            refresh();\n            clearInputs();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const deleteLine = async (index) => {\n        if (lines.length <= min) {\n            setOpen(true);\n            return;\n        }\n        await API.delete(`/bots/${botID}/${lineType}/${index}`);\n        refresh();\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogTitle>\n                    Must have at least {min} {lineType}\n                </DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">OK</Button>\n                </DialogActions>\n            </Dialog>\n            <Grid item xs={12} className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table stickyHeader>\n                        <colgroup>\n                            <col style={{ width: '80%' }} />\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align={'center'}>\n                                    Text\n                        </TableCell>\n                                <TableCell align={'center'}>\n                                    Mood\n                            </TableCell>\n                                <TableCell align={'center'}>\n                                    Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {lines.map((line, index) => (\n                                <TableRow hover key={index} className={classes.row}>\n                                    <TableCell align={'left'}>\n                                        {line.text}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        {moods[line.mood]}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <ConfirmModal onConfirm={() => deleteLine(index)} type={\"line\"} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid container spacing={3} item xs={12}>\n                <LineInput label={`Add ${lineType.substr(0, -1)}`} error={error} errorMessages={errorMsgs} line={line} updateLine={changeLine} />\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Button onClick={validate} fullWidth size={\"large\"} variant={'contained'} color={'secondary'}>Add</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { AppBar, Button, CircularProgress, FormControl, Grid, List, ListItem, ListItemText, makeStyles, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport API from 'api';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport LineTable from './LineTable';\n\nconst useStyles = makeStyles((theme) => ({\n    name: {\n        fontSize: 30,\n        fontWeight: 600,\n        textAlign: \"center\",\n        padding: 5.5\n    },\n    tabContainer: {\n        padding: 20,\n        height: \"100%\",\n        flexGrow: 1\n    },\n    generalContainer: {\n        paddingTop: 30,\n        textAlign: \"center\",\n        flexGrow: 1,\n        alignContent: \"flex-start\"\n    },\n    generalSave: {\n        alignSelf: \"flex-end\",\n    },\n    errorList: {\n        textAlign: \"center\",\n        color: \"red\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    }\n}));\n\nconst badLength = \"Name must be between 3 and 30 characters\";\n\nexport default function BotDetail() {\n    const classes = useStyles();\n\n    const [loading, setLoading] = useState(true);\n    const [tab, setTab] = React.useState(0);\n    const [bot, setBot] = useState({});\n    const { id } = useParams();\n    const [name, setName] = useState(\"\");\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [error, setError] = useState(false);\n\n    // General config\n    const [nameError, setNameError] = useState(false);\n\n    const validate = () => {\n        let errorMsgs = [];\n\n        const validName = name.length >= 3 && name.length <= 30;\n        const validGreetings = bot.greetings.length >= 2;\n        const validQuestions = bot.questions.length >= 2;\n        const validResponses = bot.responses.length >= 2;\n        if (!validName) {\n            setNameError(true);\n            setError(true);\n        }\n        if (!validGreetings) {\n            errorMsgs.push(\"Must have at least 1 greeting\");\n            setError(true);\n        }\n        if (!validQuestions) {\n            errorMsgs.push(\"Must have at least 2 questions\");\n            setError(true);\n        }\n        if (!validResponses) {\n            errorMsgs.push(\"Must have at least 2 responses\");\n            setError(true);\n        }\n\n        if (!validName || !validGreetings || !validQuestions || !validResponses) {\n            setErrorMessages(errorMsgs);\n            return;\n        }\n        updateBot();\n    };\n\n    const changeName = (event) => {\n        setName(event.target.value);\n    };\n\n    // Fetch bot data\n    const getBotData = useCallback(\n        async () => {\n            let response = await API.get(`/bots/${id}`);\n            setBot(response.data);\n            setName(response.data.name);\n            setLoading(false);\n        },\n        [id],\n    );\n\n    // Fetch bot data\n    const updateBot = async () => {\n        await API.put(`/bots/${id}`, {\n            ...bot,\n            name: name\n        }\n        );\n        getBotData();\n    };\n\n    // Initial load\n    useEffect(() => {\n        getBotData();\n    }, [getBotData]);\n\n    // Tab switching\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n\n    // Display as tabs of lines\n\n    return (\n        <React.Fragment>\n            {loading ? (\n                <Grid container style={{ flexGrow: 1 }}>\n                    <Grid item xs={12} className={classes.loading}>\n                        <CircularProgress color=\"secondary\" />\n                    </Grid >\n                </Grid >\n            ) : (\n                    <React.Fragment>\n                        <Typography className={classes.name}>\n                            {bot.name}\n                        </Typography>\n                        <AppBar position=\"static\">\n                            <Tabs value={tab} onChange={handleChange} variant={'fullWidth'}>\n                                <Tab label=\"General\" />\n                                <Tab label=\"Greetings\" />\n                                <Tab label=\"Questions\" />\n                                <Tab label=\"Responses\" />\n                            </Tabs>\n                        </AppBar>\n                        <React.Fragment>\n                            <TabPanel value={tab} index={0} className={classes.general}>\n                                <Grid container spacing={3} item xs={12} className={classes.generalContainer}>\n                                    <Grid item xs={12}>\n                                        <FormControl fullWidth>\n                                            <TextField autoFocus error={nameError} helperText={nameError ? badLength : \"\"} label=\"Name\" variant=\"outlined\" value={name} onChange={changeName} />\n                                        </FormControl>\n                                    </Grid>\n                                </Grid>\n                                {error && (\n                                    <Grid item xs={12} className={classes.errorList}>\n                                        <List subheader={\"Please fix the following errors\"}>\n                                            {errorMessages.map((msg, index) => (\n                                                <ListItem key={index}>\n                                                    <ListItemText primary={msg} className={classes.errorList} />\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Grid>\n                                )}\n                                <Grid item xs={12} className={classes.generalSave}>\n                                    <Button onClick={validate} fullWidth size={'large'} variant={'contained'} color={'secondary'}>Save</Button>\n                                </Grid>\n                            </TabPanel>\n                            <TabPanel value={tab} index={1}>\n                                <LineTable botID={bot.id} lineType={\"greetings\"} lines={bot.greetings} min={1} refresh={getBotData} />\n                            </TabPanel>\n                            <TabPanel value={tab} index={2}>\n                                <LineTable botID={bot.id} lineType={\"questions\"} lines={bot.questions} min={2} refresh={getBotData} />\n                            </TabPanel>\n                            <TabPanel value={tab} index={3}>\n                                <LineTable botID={bot.id} lineType={\"responses\"} lines={bot.responses} min={2} refresh={getBotData} />\n                            </TabPanel>\n                        </React.Fragment>\n                    </React.Fragment>\n                )\n            } </React.Fragment>\n    );\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            style={{ height: \"100%\" }}\n            {...other}\n        >\n            {value === index && (\n                <Grid container className={classes.tabContainer}>\n                    {children}\n                </Grid>\n            )}\n        </div>\n    );\n}","import Workshop from 'components/workshop/Workshop';\nimport Fight from 'components/Fight';\nimport Home from \"components/Home\";\nimport NavMenu from 'components/NavMenu';\nimport React from \"react\";\nimport {\n    HashRouter as Router,\n    Route, Switch\n} from \"react-router-dom\";\nimport { Home as HomeIcon, Build, Forum } from '@material-ui/icons';\nimport Create from 'components/workshop/Create';\nimport Edit from 'components/workshop/Edit';\nimport Entrance from 'components/workshop/Entrance';\nimport BotDetail from 'components/workshop/edit/BotDetail';\n\n\nexport const routes = {\n    \"/\": {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        exact: true,\n        icon: HomeIcon\n    },\n    \"/workshop\": {\n        name: \"Workshop\",\n        path: \"/workshop\",\n        component: Workshop,\n        icon: Build,\n        routes: [\n            {\n                path: \"/workshop/\",\n                component: Entrance\n            },\n            {\n                path: \"/workshop/create\",\n                component: Create\n            },\n            {\n                path: \"/workshop/edit\",\n                component: Edit\n            },\n            {\n                path: \"/workshop/edit/:id\",\n                component: BotDetail\n            }\n        ]\n    },\n    \"/fight\": {\n        name: \"Fight\",\n        path: \"/fight\",\n        component: Fight,\n        icon: Forum\n    },\n};\n\nexport default function App() {\n    return (\n        <Router>\n            <NavMenu routes={routes}>\n                <Switch>\n                    {Object.values(routes).map((route, i) => (\n                        <Route exact={route.exact || false} path={route.path} key={i}\n                            render={props => (\n                                // pass the sub-routes down to keep nesting\n                                <route.component {...props} routes={route.routes} />\n                            )} />\n                    ))}\n                </Switch>\n            </NavMenu>\n        </Router>\n    );\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n\nexport default function Workshop({ routes }) {\n    return (\n        <React.Fragment>\n            <Switch>\n                {routes.map((route, i) => (\n                    <Route exact path={route.path} key={i}>\n                        <route.component />\n                    </Route>\n                ))}\n            </Switch>\n        </React.Fragment>\n    );\n}\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { brown, amber } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: brown[300],\n            main: brown[600],\n            dark: brown[900],\n            contrastText: '#fff',\n        },\n        secondary: {\n            light: amber[500],\n            main: amber[600],\n            dark: amber[800],\n            contrastText: '#000',\n        },\n    },\n    layout: {\n        nav: {\n            appBarHeight: 64\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport Router from 'Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'theme';\n\nexport default function App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Router />\n        </ThemeProvider>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}