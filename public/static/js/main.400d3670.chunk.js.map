{"version":3,"sources":["api.js","components/Transcript.jsx","components/Arena.jsx","components/Fight.jsx","components/Home.jsx","components/NavMenu.jsx","components/workshop/create/Finalize.jsx","components/workshop/create/LineInput.jsx","components/workshop/create/Greetings.jsx","components/workshop/create/Name.jsx","components/workshop/create/Questions.jsx","components/workshop/create/Responses.jsx","components/workshop/Create.jsx","components/workshop/edit/ConfirmModal.jsx","components/workshop/Edit.jsx","components/workshop/Entrance.jsx","components/workshop/edit/LineTable.jsx","components/workshop/edit/BotDetail.jsx","Router.jsx","components/workshop/Workshop.jsx","theme.js","App.jsx","reportWebVitals.js","index.js"],"names":["API","require","default","create","baseURL","moods","useStyles","makeStyles","theme","container","flexGrow","maxHeight","line","display","name","fontWeight","Transcript","roomHash","classes","useState","transcript","setTranscript","useEffect","interval","setInterval","a","get","response","data","clearInterval","delete","Box","className","List","map","msg","index","Fragment","ListItem","text","mood","length","Divider","height","sideBar","borderRight","alignContent","select","padding","borderBottom","addButton","marginTop","notStartedMsg","textAlign","fontSize","transcriptContainer","overflow","Arena","bots","setBots","roomBots","setRoomBots","setRoomHash","selectedBot","setSelectedBot","active","setActive","startRoom","post","hash","b","put","id","getBots","Grid","component","Paper","item","xs","FormControl","variant","fullWidth","InputLabel","Select","label","onChange","event","target","value","MenuItem","bot","Button","onClick","newBot","some","color","ListSubheader","style","ListItemText","primary","paddingTop","title","fightZone","flex","flexDirection","marginBottom","feature","root","appBar","zIndex","drawer","backgroundColor","palette","dark","appBarLeft","width","flexShrink","appBarRight","paddingLeft","drawerPaper","drawerContainer","activeNav","secondary","contrastText","main","content","layout","nav","appBarHeight","overflowX","NavMenu","routes","children","setTitle","location","useLocation","basePath","pathname","split","CssBaseline","AppBar","position","Toolbar","disableGutters","Typography","align","noWrap","orientation","flexItem","Drawer","paper","Object","values","route","button","exact","NavLink","activeClassName","to","path","ListItemIcon","icon","Finalize","spacing","LineInput","msgs","autoFocus","error","errorMessages","updateLine","TextField","helperText","join","Greetings","updateGreetings","updateHandler","setValidator","titleStyle","greeting","setGreeting","setError","errorMsgs","setErrorMsgs","validate","useCallback","validGreeting","push","undefined","Name","updateName","setName","validName","badLength","Questions","updateQuestions","question1","setQuestion1","question2","setQuestion2","error1","setError1","error2","setError2","errorMsgs1","setErrorMsgs1","errorMsgs2","setErrorMsgs2","errorMessages1","errorMessages2","validQuestion1","validQuestion2","Responses","updateResponses","response1","setResponse1","response2","setResponse2","validResponse1","validResponse2","activeStep","success","light","stepContainer","stepContent","stepButton","alignSelf","justifyContent","ConfirmModal","onConfirm","type","open","setOpen","handleClose","IconButton","Dialog","onClose","DialogTitle","DialogActions","botsContainer","noBots","tableContainer","selectBot","textDecoration","cursor","loadingContainer","loading","directions","row","overflowWrap","LineTable","botID","lineType","lines","min","refresh","setLine","addLine","console","deleteLine","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","hover","substr","validText","size","tabContainer","generalContainer","generalSave","errorList","TabPanel","props","other","role","hidden","Container","RouterLink","HomeIcon","i","Build","direction","margin","setActiveStep","Set","completed","setCompleted","allStepsCompleted","steps","handleStep","step","has","handleComplete","newCompleted","add","isStepComplete","setBotID","greetings","setGreetings","questions","setQuestions","responses","setResponses","handler","createBot","log","JSON","stringify","Stepper","alternativeLabel","nonLinear","Step","StepButton","disabled","React","createElement","validator","setLoading","history","useHistory","deleteBot","CircularProgress","tab","setTab","setBot","useParams","setErrorMessages","nameError","setNameError","getBotData","updateBot","Tabs","newValue","Tab","general","subheader","validGreetings","validQuestions","validResponses","Forum","App","render","createMuiTheme","brown","amber","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.400d3670.chunk.js","sourcesContent":["const { default: axios } = require(\"axios\");\n\nconst API = axios.create({\n    baseURL: \"/api\"\n});\n\nconst moods = [\n    \"Happy\",\n    \"Angry\",\n    \"Sad\"\n];\n\nexport { moods };\n\n\nexport default API;","import { Box, Divider, List, ListItem, makeStyles } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useEffect, useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        maxHeight: \"100%\",\n    },\n    line: {\n        display: \"flex\"\n    },\n    name: {\n        fontWeight: 700\n    }\n}));\n\nexport default function Transcript({ roomHash }) {\n    const classes = useStyles();\n\n    const [transcript, setTranscript] = useState([]);\n\n    // Set timer loop for getting lines\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            let response = await API.get(`/rooms/${roomHash}`);\n            setTranscript(response.data);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n            // Delete room on leave\n            API.delete(`/rooms/${roomHash}`);\n        };\n    }, [roomHash]);\n\n    return (\n        <Box className={classes.container}>\n            <List>\n                {transcript.map((msg, index) => (\n                    <React.Fragment key={index}>\n                        <ListItem>\n                            <Box className={\"MuiListItemText-root MuiListItemText-multiline\"}>\n                                <p className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\"}><strong>{msg.name}</strong>: {msg.line.text}</p>\n                                <p className={\"MuiTypography-root MuiListItemText-secondary MuiTypography-body2 MuiTypography-colorTextSecondary MuiTypography-displayBlock\"}>{moods[msg.line.mood]}</p>\n                            </Box>\n                        </ListItem>\n                        {index !== transcript.length - 1 && <Divider />}\n                    </React.Fragment>\n                ))}\n            </List>\n        </Box>\n    );\n}\n","import { Button, FormControl, Grid, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Paper, Select } from '@material-ui/core';\nimport API from 'api';\nimport React, { useEffect, useState } from 'react';\nimport Transcript from './Transcript';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        height: \"100%\"\n    },\n    sideBar: {\n        borderRight: \"1px solid grey\",\n        alignContent: \"flex-start\"\n    },\n    select: {\n        padding: 10,\n        borderBottom: \"1px solid grey\",\n    },\n    addButton: {\n        marginTop: 5\n    },\n    notStartedMsg: {\n        textAlign: \"center\",\n        fontSize: 20\n    },\n    transcriptContainer: {\n        overflow: 'auto',\n        maxHeight: \"100%\"\n    }\n}));\n\nexport default function Arena() {\n    const classes = useStyles();\n\n    const [bots, setBots] = useState([]);\n    const [roomBots, setRoomBots] = useState([]);\n    const [roomHash, setRoomHash] = useState(\"\");\n    const [selectedBot, setSelectedBot] = useState(\"\");\n    const [active, setActive] = useState(false);\n\n    // Create room\n    const startRoom = async () => {\n        let response = await API.post(`/rooms`);\n        setRoomHash(response.data.hash);\n        // Add all bots to room\n        for (const b of roomBots) {\n            await API.put(`/rooms/${response.data.hash}/${b.id}`);\n        }\n        setActive(true);\n    };\n\n    // Initial load of bots\n    useEffect(() => {\n        // Fetch bots\n        const getBots = async () => {\n            let response = await API.get('/bots');\n            setBots(response.data);\n        };\n\n        getBots();\n    }, [roomHash]);\n\n    const addBot = () => {\n        if (selectedBot === \"\")\n            return;\n        let newBot = bots[selectedBot];\n        // Check if already in\n        if (roomBots.some(bot => bot.id === newBot.id)) {\n            return;\n        }\n        if (active) {\n            API.put(`/rooms/${roomHash}/${newBot.id}`);\n        } else {\n            // Add bot ID to selected bots\n            setRoomBots([...roomBots, {\n                name: newBot.name,\n                id: newBot.id\n            }]);\n        }\n    };\n\n    const changeSelection = (event) => {\n        setSelectedBot(event.target.value);\n    };\n\n    return (\n        <Grid component={Paper} container item xs={12} className={classes.container}>\n            <Grid container item xs={3} className={classes.sideBar}>\n                <Grid item xs={12} className={classes.select}>\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel>Add a bot</InputLabel>\n                        <Select\n                            variant={'outlined'}\n                            label=\"Add a bot\"\n                            onChange={changeSelection}\n                            value={selectedBot}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {bots.map((bot, index) => {\n                                return (\n                                    <MenuItem value={index} key={index}>{bot.name}</MenuItem>\n                                );\n                            })}\n                        </Select>\n                        <Button onClick={addBot} variant={'contained'} color={'secondary'} className={classes.addButton}>Add</Button>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    <List>\n                        <ListSubheader style={{ textAlign: \"center\" }}>Current Bots</ListSubheader>\n                        {roomBots.map((bot, index) => (\n                            <ListItem key={index}>\n                                <ListItemText primary={bot.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            <Grid container item xs={9} className={classes.transcriptContainer}>\n                {active ? (\n                    <Transcript roomHash={roomHash} />\n                ) : (\n                    <Grid style={{ textAlign: \"center\" }} item xs={12}>\n                        <p className={classes.notStartedMsg}>Start the room to see messages</p>\n                        <Button onClick={startRoom} variant={'contained'} color={'secondary'}>Start</Button>\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nimport Arena from './Arena';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 30,\n        flexGrow: 1,\n        alignContent: \"flex-start\",\n    },\n    title: {\n        fontSize: 30,\n    },\n    fightZone: {\n        flexGrow: 1,\n        padding: 20,\n        height: \"80vh\"\n    }\n}));\n\nexport default function Fight() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <Typography className={classes.title} align={'center'}>WELCOME TO THE DEATH ZONE</Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.fightZone}>\n                <Arena />\n            </Grid>\n        </Grid>\n    );\n}\n","import { Button, Container, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        // height: \"100%\",\n        flex: 1,\n        flexDirection: \"column\",\n        fontSize: 30,\n        textAlign: \"center\"\n    },\n    title: {\n        marginTop: 30,\n        marginBottom: 50\n    },\n    feature: {\n        marginTop: 50,\n        flexGrow: 1\n    }\n}));\n\nexport default function Landing() {\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.container}>\n            <Typography className={classes.title} variant={'h4'}>WELCOME TO CHATBOT WARS</Typography>\n            <Typography variant={'h6'}>\n                Build your own chatbot. Watch it crash and burn.\n            </Typography >\n            <Button style={{ marginTop: 20 }} variant={'contained'} color={'secondary'} component={RouterLink} to={'/workshop'}>Get Started</Button>\n            {/* <div className={classes.feature}>\n                <Typography variant={'h5'}>Fight of the Day</Typography>\n                <Arena />\n                <p>not yet...</p>\n            </div> */}\n        </Container>\n    );\n}\n","import { AppBar, CssBaseline, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        backgroundColor: theme.palette.primary.dark\n    },\n    appBarLeft: {\n        width: drawerWidth,\n        flexShrink: 1,\n        fontSize: 30,\n        fontWeight: 500,\n    },\n    appBarRight: {\n        flexGrow: 1,\n        paddingLeft: 20,\n        fontSize: 30,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    activeNav: {\n        fontWeight: \"bold\",\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main,\n        }\n    },\n    content: {\n        paddingTop: theme.layout.nav.appBarHeight,\n        flexGrow: 1,\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: 'column',\n        overflowX: \"hidden\"\n    },\n}));\n\nexport default function NavMenu({ routes, children }) {\n    const classes = useStyles();\n    const [title, setTitle] = useState(\"Home\");\n    // Match base path title \n    let location = useLocation();\n    useEffect(() => {\n        let basePath = \"/\" + location.pathname.split(\"/\")[1];\n        setTitle(routes[basePath].name);\n        return () => {\n        };\n    }, [location, routes, title]);\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar disableGutters>\n                    <Typography className={classes.appBarLeft} variant=\"h4\" align={'center'} noWrap>\n                        Chatbot Wars\n                    </Typography>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Typography className={classes.appBarRight} variant=\"h5\" align={'center'}>{title}</Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        {Object.values(routes).map((route, index) => (\n                            <ListItem\n                                button\n                                exact={route.exact || false}\n                                component={NavLink}\n                                activeClassName={classes.activeNav}\n                                to={route.path}\n                                key={index}>\n                                <ListItemIcon>\n                                    <route.icon />\n                                </ListItemIcon>\n                                <ListItemText primary={route.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Drawer>\n            <main className={classes.content}>\n                {children}\n            </main>\n        </div>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function Finalize() {\n    return (\n        <React.Fragment>\n            <Grid item container spacing={3} alignContent=\"space-around\" style={{ textAlign: \"center\", height: \"100%\" }}>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >That's a good start.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        You can keep working on your bot anytime by going back to the workshop.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        Click 'To Glory' to send your bot to the battlefield!\n                </Typography>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { moods } from 'api';\n\nconst streamErrors = (msgs) => {\n    return msgs.join(\"\\n\");\n};\n\nexport default function LineInput({ autoFocus, error, errorMessages, label, line, updateLine }) {\n\n    const changeText = (event) => {\n        updateLine({ text: event.target.value });\n    };\n\n    const changeSelection = (event) => {\n        updateLine({ mood: event.target.value });\n    };\n\n\n    return (\n        <React.Fragment>\n            <Grid item xs={9}>\n                <FormControl fullWidth>\n                    <TextField autoFocus={autoFocus || false} value={line.text} error={error} helperText={streamErrors(errorMessages)} label={label} variant=\"outlined\" onChange={changeText} />\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} >\n                <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Mood</InputLabel>\n                    <Select\n                        variant={'outlined'}\n                        label=\"Mood\"\n                        onChange={changeSelection}\n                        value={line.mood}\n                    >\n                        {moods.map((mood, index) => {\n                            return (\n                                <MenuItem value={index} key={index}>{mood}</MenuItem>\n                            );\n                        })}\n                    </Select>\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Greeting must be non-empty\";\n\nexport default function Greetings({ value, updateHandler: updateGreetings, setValidator, titleStyle }) {\n    const [greeting, setGreeting] = useState(value[0]);\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n\n\n    const validate = useCallback(\n        () => {\n            let errorMessages = [];\n            const validGreeting = greeting.text.length > 0;\n            if (!validGreeting) {\n                setError(true);\n                errorMessages.push(badLength);\n            }\n            setErrorMsgs(errorMessages);\n            updateGreetings([greeting]);\n            return validGreeting;\n        },\n        [greeting, updateGreetings],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeGreeting = ({ text, mood }) => {\n        setGreeting({\n            text: text !== undefined ? text : greeting.text,\n            mood: mood !== undefined ? mood : greeting.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>What's your bot gonna say prior to embarassing your foes?</Typography>\n            </Grid>\n            <LineInput autoFocus error={error} errorMessages={errorMsgs} label=\"Greeting\" line={greeting} updateLine={changeGreeting} />\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, TextField, Typography } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nconst badLength = \"Name must be between 3 and 30 characters\";\n\nexport default function Name({ value, updateHandler: updateName, setValidator, titleStyle }) {\n    const [name, setName] = useState(value);\n    const [error, setError] = useState(false);\n\n    const validate = useCallback(\n        () => {\n            const validName = name.length >= 3 && name.length <= 30;\n            if (!validName) {\n                setError(true);\n            } else {\n                updateName(name);\n            }\n            return validName;\n        },\n        [name, updateName],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>First thing's first, give your bot a name</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl fullWidth>\n                    <TextField autoFocus error={error} helperText={error ? badLength : \"\"} label=\"Name\" variant=\"outlined\" value={name} onChange={changeName} />\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Question must be non-empty\";\n\nexport default function Questions({ value, updateHandler: updateQuestions, setValidator, titleStyle }) {\n    const [question1, setQuestion1] = useState(value[0]);\n    const [question2, setQuestion2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validQuestion1 = question1.text.length > 0;\n            const validQuestion2 = question2.text.length > 0;\n            if (!validQuestion1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validQuestion2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateQuestions([question1, question2]);\n            return validQuestion1 && validQuestion2;\n        },\n        [question1, question2, updateQuestions],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeQuestion1 = ({ text, mood }) => {\n        setQuestion1({\n            text: text !== undefined ? text : question1.text,\n            mood: mood !== undefined ? mood : question1.mood\n        });\n    };\n\n    const changeQuestion2 = ({ text, mood }) => {\n        setQuestion2({\n            text: text !== undefined ? text : question2.text,\n            mood: mood !== undefined ? mood : question2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Everyone needs a conversation starter</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Question 1\" error={error1} errorMessages={errorMsgs1} line={question1} updateLine={changeQuestion1} />\n            <LineInput label=\"Question 2\" error={error2} errorMessages={errorMsgs2} line={question2} updateLine={changeQuestion2} />\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Response must be non-empty\";\n\nexport default function Responses({ value, updateHandler: updateResponses, setValidator, titleStyle }) {\n    const [response1, setResponse1] = useState(value[0]);\n    const [response2, setResponse2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validResponse1 = response1.text.length > 0;\n            const validResponse2 = response2.text.length > 0;\n            if (!validResponse1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validResponse2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateResponses([response1, response2]);\n            return validResponse1 && validResponse2;\n        },\n        [response1, response2, updateResponses],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeResponse1 = ({ text, mood }) => {\n        setResponse1({\n            text: text !== undefined ? text : response1.text,\n            mood: mood !== undefined ? mood : response1.mood\n        });\n    };\n\n    const changeResponse2 = ({ text, mood }) => {\n        setResponse2({\n            text: text !== undefined ? text : response2.text,\n            mood: mood !== undefined ? mood : response2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Time for some trash talk</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Response 1\" error={error1} errorMessages={errorMsgs1} line={response1} updateLine={changeResponse1} />\n            <LineInput label=\"Response 2\" error={error2} errorMessages={errorMsgs2} line={response2} updateLine={changeResponse2} />\n        </React.Fragment>\n    );\n}\n","import { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'api';\nimport Finalize from 'components/workshop/create/Finalize';\nimport Greetings from 'components/workshop/create/Greetings';\nimport Name from 'components/workshop/create/Name';\nimport Questions from 'components/workshop/create/Questions';\nimport Responses from 'components/workshop/create/Responses';\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: \"flex\",\n        flexDirection: 'column',\n        padding: 20\n    },\n    activeStep: {\n        color: theme.palette.success.light\n    },\n    stepContainer: {\n        padding: 20,\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n    stepContent: {\n        flexGrow: 1,\n        padding: \"0 !important\",\n        alignContent: \"flex-start\"\n    },\n    stepButton: {\n        alignSelf: \"flex-end\",\n        textAlign: \"center\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n    }\n}));\n\n\nexport default function Create() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [completed, setCompleted] = useState(new Set());\n\n    const allStepsCompleted = () => {\n        return completed.size === steps.length;\n    };\n\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        // Check for allowing user to directly advance this far\n        if (completed.has(step)) {\n            setActiveStep(step);\n        }\n    };\n\n    const handleComplete = () => {\n        const newCompleted = new Set(completed);\n        // Call child validation method\n        if (!steps[activeStep].validate()) {\n            newCompleted.delete(activeStep);\n            setCompleted(newCompleted);\n            return;\n        }\n\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        if (completed.size !== steps.length) {\n            handleNext();\n        }\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    const lastStep = () => {\n        return activeStep === steps.length - 1;\n    };\n\n    const [botID, setBotID] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [greetings, setGreetings] = useState([\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [questions, setQuestions] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [responses, setResponses] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n\n    const steps = [\n        {\n            title: \"Name\",\n            component: Name,\n            value: name,\n            handler: setName\n        },\n        {\n            title: \"Greetings\",\n            component: Greetings,\n            value: greetings,\n            handler: setGreetings\n        },\n        {\n            title: \"Questions\",\n            component: Questions,\n            value: questions,\n            handler: setQuestions\n        },\n        {\n            title: \"Responses\",\n            component: Responses,\n            value: responses,\n            handler: setResponses\n        },\n        {\n            title: \"Finalize\",\n            component: Finalize,\n            value: name,\n            handler: null,\n            validate: () => true\n        },\n    ];\n\n    const createBot = async () => {\n        const bot = {\n            name: name,\n            greetings: greetings,\n            questions: questions,\n            responses: responses,\n        };\n        console.log(bot);\n\n        let response = await API.post('/bots', bot);\n        // Should log ID here\n        setBotID(response.data.id);\n        console.log(JSON.stringify(response.data));\n    };\n\n\n    return (\n        <div className={classes.root}>\n            {!allStepsCompleted() && (<Stepper alternativeLabel nonLinear activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    return (\n                        <Step active={activeStep === index} key={step.title} {...stepProps}>\n                            <StepButton\n                                disabled={activeStep !== index && !isStepComplete(index)}\n                                onClick={handleStep(index)}\n                                completed={activeStep !== index && isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {step.title}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>)}\n            <Grid container direction={'row'} spacing={3} className={classes.stepContainer}>\n                {allStepsCompleted() ? (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant={'h4'}>\n                                Bot created successfully!\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button to={`/workshop/edit/${botID}`} component={RouterLink} variant={'contained'} color={'secondary'}>See it in the workshop</Button>\n                        </Grid>\n                    </React.Fragment>\n                ) : (\n                        <React.Fragment>\n                            <Grid container spacing={3} item xs={12} className={classes.stepContent}>\n                                {React.createElement(\n                                    steps[activeStep].component,\n                                    {\n                                        value: steps[activeStep].value,\n                                        updateHandler: steps[activeStep].handler,\n                                        setValidator: (validator => steps[activeStep].validate = validator),\n                                        titleStyle: { padding: \"30px 0px\" }\n                                    },\n                                )}\n                            </Grid>\n                            <Grid item xs={12} className={classes.stepButton}>\n                                <Button disabled={activeStep === 0} onClick={handleBack} size=\"large\" variant=\"contained\" color=\"secondary\">Back</Button>\n                                {!lastStep() ?\n                                    (\n                                        < Button onClick={handleComplete} size=\"large\" variant=\"contained\" color=\"secondary\">Next</Button>\n                                    ) : (\n                                        < Button onClick={() => { createBot(); handleComplete(); }} size=\"large\" variant=\"contained\" color=\"secondary\">To Glory</Button>\n                                    )\n                                }\n                            </Grid>\n                        </React.Fragment>\n                    )}\n            </Grid>\n        </div >\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, IconButton, makeStyles } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles({\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    }\n});\n\nexport default function ConfirmModal({ onConfirm, type }) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <IconButton className={classes.delete} onClick={handleOpen}>\n                <DeleteIcon />\n            </IconButton>\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle >Are you sure you want to delete this {type}?</DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">Cancel</Button>\n                    <Button onClick={handleConfirm} color=\"primary\" className={classes.delete}>Delete</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { Button, CircularProgress, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport API from 'api';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport ConfirmModal from './edit/ConfirmModal';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n    },\n    botsContainer: {\n        paddingTop: 20,\n        alignContent: \"flex-start\"\n    },\n    noBots: {\n        marginTop: \"20%\",\n        marginBottom: 20\n    },\n    tableContainer: {\n        padding: 20\n    },\n    selectBot: {\n        textDecoration: \"none\",\n        color: \"black\",\n        cursor: \"pointer\",\n        '&:hover': {\n            color: \"green\"\n        }\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n    loadingContainer: {\n        alignContent: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    }\n}));\n\n\nexport default function Edit() {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(true);\n    const [bots, setBots] = useState([]);\n\n    const history = useHistory();\n\n    // Fetch bot data\n    const getBots = useCallback(\n        async () => {\n            let response = await API.get('/bots');\n            setBots(response.data);\n            setLoading(false);\n        },\n        [],\n    );\n\n    const selectBot = (id) => {\n        history.push(`/workshop/edit/${id}`);\n    };\n\n    useEffect(() => {\n        getBots();\n    }, [getBots]);\n\n\n    const deleteBot = async (id) => {\n        await API.delete(`/bots/${id}`);\n        getBots();\n    };\n\n    return (\n        <Grid container className={classes.container}>\n            {loading ? (\n                <Grid item xs={12} className={classes.loading}>\n                    <CircularProgress color=\"secondary\" />\n                </Grid >\n            ) : (\n                <Grid container item xs={12} className={classes.botsContainer}>\n                    {bots.length > 0 ? (\n                        <React.Fragment>\n                            <Grid item xs={12} >\n                                <Typography variant={'h5'} align={'center'}>Select a bot to edit</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.tableContainer}>\n                                <TableContainer component={Paper} >\n                                    <Table stickyHeader>\n                                        <colgroup>\n                                            <col style={{ width: '80%' }} />\n                                            <col style={{ width: '20%' }} />\n                                        </colgroup>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell align={'center'}>Delete</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {bots.map((bot, index) => (\n                                                <TableRow key={index} hover>\n                                                    <TableCell className={classes.selectBot} onClick={() => { selectBot(bot.id); }} align={'left'}>\n                                                        {bot.name}\n                                                    </TableCell>\n                                                    <TableCell align={'center'}>\n                                                        <ConfirmModal onConfirm={() => deleteBot(bot.id)} type={\"bot\"} />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.noBots}>\n                                <Typography variant={'h4'} align={'center'}>You haven't created any bots</Typography>\n                            </Grid>\n                            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                <Button component={RouterLink} to={\"/workshop/create\"} variant={'contained'} color={'secondary'}>Create a bot</Button>\n                            </Grid>\n                        </React.Fragment>\n                    )\n                    }\n                </Grid>\n            )}\n        </Grid >\n    );\n}\n","import { Button, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        padding: \"10%\",\n        fontSize: 40\n    },\n    directions: {\n        fontSize: 20\n    }\n}));\n\nexport default function Entrance() {\n    const classes = useStyles();\n\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={3} direction={'row'}>\n                <Grid item xs={12} >\n                    <Typography className={classes.title} align={'center'}>WELCOME TO THE WORKSHOP</Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography className={classes.directions} align={'center'}>Start off by creating a bot</Typography>\n                </Grid>\n                <Grid item xs={5} style={{ margin: \"auto\" }}>\n                    <Button component={RouterLink} to={'/workshop/create'} style={{ fontSize: 20 }} fullWidth size=\"large\" variant=\"contained\" color=\"secondary\">Create</Button>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography className={classes.directions} align={'center'}>Or keep working on existing ones</Typography>\n                </Grid>\n                <Grid item xs={5} style={{ margin: \"auto\" }}>\n                    <Button component={RouterLink} to={'/workshop/edit'} style={{ fontSize: 20 }} fullWidth size=\"large\" variant=\"contained\" color=\"secondary\">Edit</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, Grid, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useState } from 'react';\nimport LineInput from '../create/LineInput';\nimport ConfirmModal from './ConfirmModal';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"70%\"\n    },\n    row: {\n        overflowWrap: 'break-word'\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n}));\n\nconst badLength = \"Question must be non-empty\";\n\n\nexport default function LineTable({ botID, lineType, lines, min, refresh }) {\n    const classes = useStyles();\n    const [line, setLine] = useState({\n        text: \"\",\n        mood: 0\n    });\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n    const [open, setOpen] = useState(false);\n\n\n    const changeLine = ({ text, mood }) => {\n        setLine({\n            text: text !== undefined ? text : line.text,\n            mood: mood !== undefined ? mood : line.mood\n        });\n    };\n\n    const clearInputs = () => {\n        setLine({\n            text: \"\",\n            mood: 0\n        });\n    };\n\n    const validate = () => {\n        setError(false);\n        let errorMessages = [];\n\n        const validText = line.text.length > 0;\n        if (!validText) {\n            errorMessages.push(badLength);\n            setError(true);\n        }\n        setErrorMsgs(errorMessages);\n\n        if (!validText)\n            return;\n        addLine();\n    };\n\n    const addLine = async () => {\n        try {\n            await API.post(`/bots/${botID}/${lineType}`, line);\n            refresh();\n            clearInputs();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const deleteLine = async (index) => {\n        if (lines.length <= min) {\n            setOpen(true);\n            return;\n        }\n        await API.delete(`/bots/${botID}/${lineType}/${index}`);\n        refresh();\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogTitle>\n                    Must have at least {min} {lineType}\n                </DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">OK</Button>\n                </DialogActions>\n            </Dialog>\n            <Grid item xs={12} className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table stickyHeader>\n                        <colgroup>\n                            <col style={{ width: '80%' }} />\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align={'center'}>\n                                    Text\n                        </TableCell>\n                                <TableCell align={'center'}>\n                                    Mood\n                            </TableCell>\n                                <TableCell align={'center'}>\n                                    Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {lines.map((line, index) => (\n                                <TableRow hover key={index} className={classes.row}>\n                                    <TableCell align={'left'}>\n                                        {line.text}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        {moods[line.mood]}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <ConfirmModal onConfirm={() => deleteLine(index)} type={\"line\"} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid container spacing={3} item xs={12}>\n                <LineInput label={`Add ${lineType.substr(0, -1)}`} error={error} errorMessages={errorMsgs} line={line} updateLine={changeLine} />\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Button onClick={validate} fullWidth size={\"large\"} variant={'contained'} color={'secondary'}>Add</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { AppBar, Button, CircularProgress, FormControl, Grid, List, ListItem, ListItemText, makeStyles, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport API from 'api';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport LineTable from './LineTable';\n\nconst useStyles = makeStyles((theme) => ({\n    name: {\n        fontSize: 30,\n        fontWeight: 600,\n        textAlign: \"center\",\n        padding: 5.5\n    },\n    tabContainer: {\n        padding: 20,\n        height: \"100%\",\n        flexGrow: 1\n    },\n    generalContainer: {\n        paddingTop: 30,\n        textAlign: \"center\",\n        flexGrow: 1,\n        alignContent: \"flex-start\"\n    },\n    generalSave: {\n        alignSelf: \"flex-end\",\n    },\n    errorList: {\n        textAlign: \"center\",\n        color: \"red\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    }\n}));\n\nconst badLength = \"Name must be between 3 and 30 characters\";\n\nexport default function BotDetail() {\n    const classes = useStyles();\n\n    const [loading, setLoading] = useState(true);\n    const [tab, setTab] = React.useState(0);\n    const [bot, setBot] = useState({});\n    const { id } = useParams();\n    const [name, setName] = useState(\"\");\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [error, setError] = useState(false);\n\n    // General config\n    const [nameError, setNameError] = useState(false);\n\n    const validate = () => {\n        let errorMsgs = [];\n\n        const validName = name.length >= 3 && name.length <= 30;\n        const validGreetings = bot.greetings.length >= 2;\n        const validQuestions = bot.questions.length >= 2;\n        const validResponses = bot.responses.length >= 2;\n        if (!validName) {\n            setNameError(true);\n            setError(true);\n        }\n        if (!validGreetings) {\n            errorMsgs.push(\"Must have at least 1 greeting\");\n            setError(true);\n        }\n        if (!validQuestions) {\n            errorMsgs.push(\"Must have at least 2 questions\");\n            setError(true);\n        }\n        if (!validResponses) {\n            errorMsgs.push(\"Must have at least 2 responses\");\n            setError(true);\n        }\n\n        if (!validName || !validGreetings || !validQuestions || !validResponses) {\n            setErrorMessages(errorMsgs);\n            return;\n        }\n        updateBot();\n    };\n\n    const changeName = (event) => {\n        setName(event.target.value);\n    };\n\n    // Fetch bot data\n    const getBotData = useCallback(\n        async () => {\n            let response = await API.get(`/bots/${id}`);\n            setBot(response.data);\n            setName(response.data.name);\n            setLoading(false);\n        },\n        [id],\n    );\n\n    // Fetch bot data\n    const updateBot = async () => {\n        await API.put(`/bots/${id}`, {\n            ...bot,\n            name: name\n        }\n        );\n        getBotData();\n    };\n\n    // Initial load\n    useEffect(() => {\n        getBotData();\n    }, [getBotData]);\n\n    // Tab switching\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n\n    // Display as tabs of lines\n\n    return (\n        <React.Fragment>\n            {loading ? (\n                <Grid container style={{ flexGrow: 1 }}>\n                    <Grid item xs={12} className={classes.loading}>\n                        <CircularProgress color=\"secondary\" />\n                    </Grid >\n                </Grid >\n            ) : (\n                    <React.Fragment>\n                        <Typography className={classes.name}>\n                            {bot.name}\n                        </Typography>\n                        <AppBar position=\"static\">\n                            <Tabs value={tab} onChange={handleChange} variant={'fullWidth'}>\n                                <Tab label=\"General\" />\n                                <Tab label=\"Greetings\" />\n                                <Tab label=\"Questions\" />\n                                <Tab label=\"Responses\" />\n                            </Tabs>\n                        </AppBar>\n                        <React.Fragment>\n                            <TabPanel value={tab} index={0} className={classes.general}>\n                                <Grid container spacing={3} item xs={12} className={classes.generalContainer}>\n                                    <Grid item xs={12}>\n                                        <FormControl fullWidth>\n                                            <TextField autoFocus error={nameError} helperText={nameError ? badLength : \"\"} label=\"Name\" variant=\"outlined\" value={name} onChange={changeName} />\n                                        </FormControl>\n                                    </Grid>\n                                </Grid>\n                                {error && (\n                                    <Grid item xs={12} className={classes.errorList}>\n                                        <List subheader={\"Please fix the following errors\"}>\n                                            {errorMessages.map((msg, index) => (\n                                                <ListItem key={index}>\n                                                    <ListItemText primary={msg} className={classes.errorList} />\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Grid>\n                                )}\n                                <Grid item xs={12} className={classes.generalSave}>\n                                    <Button onClick={validate} fullWidth size={'large'} variant={'contained'} color={'secondary'}>Save</Button>\n                                </Grid>\n                            </TabPanel>\n                            <TabPanel value={tab} index={1}>\n                                <LineTable botID={bot.id} lineType={\"greetings\"} lines={bot.greetings} min={1} refresh={getBotData} />\n                            </TabPanel>\n                            <TabPanel value={tab} index={2}>\n                                <LineTable botID={bot.id} lineType={\"questions\"} lines={bot.questions} min={2} refresh={getBotData} />\n                            </TabPanel>\n                            <TabPanel value={tab} index={3}>\n                                <LineTable botID={bot.id} lineType={\"responses\"} lines={bot.responses} min={2} refresh={getBotData} />\n                            </TabPanel>\n                        </React.Fragment>\n                    </React.Fragment>\n                )\n            } </React.Fragment>\n    );\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            style={{ height: \"100%\" }}\n            {...other}\n        >\n            {value === index && (\n                <Grid container className={classes.tabContainer}>\n                    {children}\n                </Grid>\n            )}\n        </div>\n    );\n}","import Workshop from 'components/workshop/Workshop';\nimport Fight from 'components/Fight';\nimport Home from \"components/Home\";\nimport NavMenu from 'components/NavMenu';\nimport React from \"react\";\nimport {\n    HashRouter as Router,\n    Route, Switch\n} from \"react-router-dom\";\nimport { Home as HomeIcon, Build, Forum } from '@material-ui/icons';\nimport Create from 'components/workshop/Create';\nimport Edit from 'components/workshop/Edit';\nimport Entrance from 'components/workshop/Entrance';\nimport BotDetail from 'components/workshop/edit/BotDetail';\n\n\nexport const routes = {\n    \"/\": {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        exact: true,\n        icon: HomeIcon\n    },\n    \"/workshop\": {\n        name: \"Workshop\",\n        path: \"/workshop\",\n        component: Workshop,\n        icon: Build,\n        routes: [\n            {\n                path: \"/workshop/\",\n                component: Entrance\n            },\n            {\n                path: \"/workshop/create\",\n                component: Create\n            },\n            {\n                path: \"/workshop/edit\",\n                component: Edit\n            },\n            {\n                path: \"/workshop/edit/:id\",\n                component: BotDetail\n            }\n        ]\n    },\n    \"/fight\": {\n        name: \"Fight\",\n        path: \"/fight\",\n        component: Fight,\n        icon: Forum\n    },\n};\n\nexport default function App() {\n    return (\n        <Router>\n            <NavMenu routes={routes}>\n                <Switch>\n                    {Object.values(routes).map((route, i) => (\n                        <Route exact={route.exact || false} path={route.path} key={i}\n                            render={props => (\n                                // pass the sub-routes down to keep nesting\n                                <route.component {...props} routes={route.routes} />\n                            )} />\n                    ))}\n                </Switch>\n            </NavMenu>\n        </Router>\n    );\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n\nexport default function Workshop({ routes }) {\n    return (\n        <React.Fragment>\n            <Switch>\n                {routes.map((route, i) => (\n                    <Route exact path={route.path} key={i}>\n                        <route.component />\n                    </Route>\n                ))}\n            </Switch>\n        </React.Fragment>\n    );\n}\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { brown, amber } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: brown[300],\n            main: brown[600],\n            dark: brown[900],\n            contrastText: '#fff',\n        },\n        secondary: {\n            light: amber[500],\n            main: amber[600],\n            dark: amber[800],\n            contrastText: '#000',\n        },\n    },\n    layout: {\n        nav: {\n            appBarHeight: 64\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport Router from 'Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'theme';\n\nexport default function App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Router />\n        </ThemeProvider>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}