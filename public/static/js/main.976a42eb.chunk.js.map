{"version":3,"sources":["api.js","components/fight/Transcript.jsx","components/fight/Arena.jsx","components/fight/Fight.jsx","components/Home.jsx","hooks/auth.js","components/workshop/edit/ConfirmModal.jsx","components/NavMenu.jsx","components/workshop/create/Finalize.jsx","components/workshop/create/LineInput.jsx","components/workshop/create/Greetings.jsx","hooks/debounce.js","components/workshop/create/Name.jsx","components/workshop/create/Questions.jsx","components/workshop/create/Responses.jsx","components/workshop/Create.jsx","components/workshop/Edit.jsx","components/workshop/Entrance.jsx","components/workshop/edit/LineTable.jsx","components/workshop/edit/BotDetail.jsx","components/auth/Login.jsx","components/auth/Register.jsx","router/Router.jsx","components/workshop/Workshop.jsx","theme.js","App.jsx","index.js"],"names":["API","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","moods","useStyles","makeStyles","theme","container","flexGrow","maxHeight","line","display","name","fontWeight","Transcript","roomHash","scrollContainerRef","classes","scrollRef","useRef","useState","transcript","setTranscript","useEffect","el","current","scrollHeight","clientHeight","scrollTop","scrollIntoView","behaviour","length","interval","setInterval","a","get","response","data","clearInterval","delete","Box","className","List","ListItem","ListItemText","primary","map","msg","index","Fragment","ref","text","mood","Divider","height","border","sideBar","borderRight","alignContent","select","padding","borderBottom","addButton","marginTop","notStartedContainer","textAlign","justifyContent","notStartedMsg","fontSize","transcriptContainer","overflow","Arena","bots","setBots","roomBots","setRoomBots","setRoomHash","selectedBot","setSelectedBot","active","setActive","startRoom","post","hash","b","put","id","getBots","Grid","component","Paper","elevation","item","xs","FormControl","variant","fullWidth","InputLabel","Select","label","onChange","event","target","value","MenuItem","bot","Button","onClick","newBot","some","color","ListSubheader","style","paddingTop","title","fightZone","flex","flexDirection","marginBottom","feature","button","margin","authContext","createContext","ProvideAuth","children","auth","user","setUser","fetchData","console","register","loginData","Error","login","username","password","setItem","logout","removeItem","useProvideAuth","Provider","useAuth","useContext","confirmButton","backgroundColor","props","hoverColor","ConfirmModal","onConfirm","prompt","confirmText","render","open","setOpen","handleClose","Dialog","onClose","DialogTitle","DialogActions","autoFocus","root","appBar","zIndex","drawer","palette","dark","dividerColor","contrastText","appBarLeft","width","flexShrink","appBarRight","paddingRight","loginLink","textDecoration","secondary","main","logoutContainer","logoutButton","drawerPaper","drawerContainer","activeNav","content","layout","nav","appBarHeight","overflowX","NavMenu","routes","useTheme","history","useHistory","CssBaseline","AppBar","position","Toolbar","disableGutters","headerContainer","Typography","align","noWrap","alignSelf","IconButton","ExitToApp","push","NavLink","to","Drawer","paper","Object","values","route","icon","exact","activeClassName","path","ListItemIcon","Finalize","spacing","LineInput","msgs","errorMessages","updateLine","TextField","helperText","join","Greetings","updateGreetings","updateHandler","setValidator","titleStyle","greeting","setGreeting","setError","errorMsgs","setErrorMsgs","validate","useCallback","validGreeting","undefined","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","valid","borderColor","borderWidth","validName","Name","updateName","setName","checkedName","setCheckedName","debouncedName","currentName","checkBotName","badLength","Questions","updateQuestions","question1","setQuestion1","question2","setQuestion2","error1","setError1","error2","setError2","errorMsgs1","setErrorMsgs1","errorMsgs2","setErrorMsgs2","errorMessages1","errorMessages2","validQuestion1","validQuestion2","Responses","updateResponses","response1","setResponse1","response2","setResponse2","validResponse1","validResponse2","activeStep","success","light","stepContainer","stepContent","stepButton","botsContainer","noBots","tableContainer","selectBot","cursor","loadingContainer","loading","directionText","row","overflowWrap","LineTable","botID","lineType","lines","min","refresh","setLine","addLine","deleteLine","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","hover","substr","validText","size","tabContainer","generalContainer","generalSave","errorList","TabPanel","other","role","hidden","paddingBottom","formContainer","bottomText","link","info","failed","formRow","RouterLink","HomeIcon","useRouteMatch","i","PrivateRoute","Build","setActiveStep","Set","completed","setCompleted","allStepsCompleted","steps","handleStep","step","has","handleComplete","newCompleted","add","isStepComplete","setBotID","greetings","setGreetings","questions","setQuestions","responses","setResponses","createBot","log","JSON","stringify","Stepper","alternativeLabel","nonLinear","Step","StepButton","disabled","direction","React","createElement","validator","setLoading","deleteBot","CircularProgress","useParams","tab","setTab","setBot","setErrorMessages","nameError","setNameError","validGreetings","validQuestions","validResponses","updateBot","getBotData","showValidName","Tabs","newValue","Tab","general","subheader","Forum","location","useLocation","state","setState","errors","setErrors","setFailed","newErrors","tryLogin","from","pathname","replace","Person","Lock","type","noAuth","firstName","lastName","checkedUsername","setCheckedUsername","debouncedUsername","checkUsername","tryRegister","App","NoAuthRoute","rest","createMuiTheme","brown","amber","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.976a42eb.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n    baseURL: \"/api\",\n});\n\n// Add stored token to header for each request\nAPI.interceptors.request.use(config => {\n    const token = localStorage.getItem(\"jwt_token\");\n    config.headers.Authorization = `Bearer ${token}`;\n    return config;\n},\n    error => Promise.reject(error)\n);\n\n\nconst moods = [\n    \"Happy\",\n    \"Angry\",\n    \"Sad\"\n];\n\nexport { moods };\n\n\nexport default API;","import { Box, Divider, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        maxHeight: \"100%\",\n    },\n    line: {\n        display: \"flex\"\n    },\n    name: {\n        fontWeight: 700\n    }\n}));\n\nexport default function Transcript({ roomHash, scrollContainerRef }) {\n    const classes = useStyles();\n    const scrollRef = useRef(null);\n\n    const [transcript, setTranscript] = useState([]);\n\n    // Autoscroll\n    useEffect(() => {\n        const el = scrollContainerRef.current;\n        if (scrollRef.current && (el.scrollHeight - el.clientHeight) - el.scrollTop < 80) {\n            scrollRef.current.scrollIntoView({ behaviour: \"smooth\" });\n        }\n    }, [transcript.length, scrollContainerRef]);\n\n    // Set timer loop for getting lines\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            let response = await API.get(`/rooms/${roomHash}`);\n            setTranscript(response.data);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n            // Delete room on leave\n            API.delete(`/rooms/${roomHash}`);\n        };\n    }, [roomHash]);\n\n    return (\n        <Box className={classes.container}>\n            <List>\n                {transcript.length === 0 ?\n                    <ListItem>\n                        <ListItemText primary={\"Waiting for messages...\"} />\n                    </ListItem>\n                    :\n                    transcript.map((msg, index) => (\n                        <React.Fragment key={index}>\n                            <ListItem ref={index === transcript.length - 1 ? scrollRef : null}>\n                                <Box className={\"MuiListItemText-root MuiListItemText-multiline\"}>\n                                    <p className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\"}><strong>{msg.name}</strong>: {msg.line.text}</p>\n                                    <p className={\"MuiTypography-root MuiListItemText-secondary MuiTypography-body2 MuiTypography-colorTextSecondary MuiTypography-displayBlock\"}>{moods[msg.line.mood]}</p>\n                                </Box>\n                            </ListItem>\n                            {index !== transcript.length - 1 && <Divider />}\n                        </React.Fragment>\n                    ))\n                }\n            </List>\n        </Box>\n    );\n}\n","import { Button, FormControl, Grid, InputLabel, List, ListItem, ListItemText, ListSubheader, makeStyles, MenuItem, Paper, Select } from '@material-ui/core';\nimport API from 'api';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Transcript from './Transcript';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n        height: \"100%\",\n        border: \"1px solid #bbb\"\n    },\n    sideBar: {\n        borderRight: \"1px solid grey\",\n        alignContent: \"flex-start\"\n    },\n    select: {\n        padding: 10,\n        borderBottom: \"1px solid grey\",\n    },\n    addButton: {\n        marginTop: 5\n    },\n    notStartedContainer: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    notStartedMsg: {\n        textAlign: \"center\",\n        fontSize: 20\n    },\n    transcriptContainer: {\n        overflow: 'auto',\n        maxHeight: \"100%\"\n    }\n}));\n\nexport default function Arena() {\n    const classes = useStyles();\n    const scrollContainerRef = useRef(null);\n\n\n    const [bots, setBots] = useState([]);\n    const [roomBots, setRoomBots] = useState([]);\n    const [roomHash, setRoomHash] = useState(\"\");\n    const [selectedBot, setSelectedBot] = useState(\"\");\n    const [active, setActive] = useState(false);\n\n    // Create room\n    const startRoom = async () => {\n        let response = await API.post(`/rooms`);\n        setRoomHash(response.data.hash);\n        // Add all bots to room\n        for (const b of roomBots) {\n            await API.put(`/rooms/${response.data.hash}/${b.id}`);\n        }\n        setActive(true);\n    };\n\n    // TODO: start socket here and maybe pass it down?\n    // Initial load of bots\n    useEffect(() => {\n        // Fetch bots\n        const getBots = async () => {\n            let response = await API.get('/bots');\n            setBots(response.data);\n        };\n\n        getBots();\n    }, [roomHash]);\n\n    const addBot = () => {\n        if (selectedBot === \"\")\n            return;\n        let newBot = bots[selectedBot];\n        // Check if already in\n        if (roomBots.some(bot => bot.id === newBot.id)) {\n            return;\n        }\n        if (active) {\n            API.put(`/rooms/${roomHash}/${newBot.id}`);\n        }\n        // Add bot ID to selected bots\n        setRoomBots([...roomBots, {\n            name: newBot.name,\n            id: newBot.id\n        }]);\n    };\n\n    const changeSelection = (event) => {\n        setSelectedBot(event.target.value);\n    };\n\n    return (\n        <Grid component={Paper} elevation={3} container item xs={12} className={classes.container}>\n            <Grid container item xs={3} className={classes.sideBar}>\n                <Grid item xs={12} className={classes.select}>\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel>Add a bot</InputLabel>\n                        <Select\n                            variant={'outlined'}\n                            label=\"Add a bot\"\n                            onChange={changeSelection}\n                            value={selectedBot}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {bots.map((bot, index) => {\n                                return (\n                                    <MenuItem value={index} key={index}>{bot.name}</MenuItem>\n                                );\n                            })}\n                        </Select>\n                        <Button onClick={addBot} variant={'contained'} color={'secondary'} className={classes.addButton}>Add</Button>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    <List>\n                        <ListSubheader style={{ textAlign: \"center\" }}>Current Bots</ListSubheader>\n                        {roomBots.map((bot, index) => (\n                            <ListItem key={index}>\n                                <ListItemText primary={bot.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            <Grid container item xs={9} className={classes.transcriptContainer} ref={scrollContainerRef}>\n                {active ? (\n                    <Transcript roomHash={roomHash} scrollContainerRef={scrollContainerRef} />\n                ) : (\n                    <Grid container className={classes.notStartedContainer} item xs={12}>\n                        <Grid item xs={12}>\n                            <p className={classes.notStartedMsg}>Start the room to see messages</p>\n                            <Button onClick={startRoom} variant={'contained'} color={'secondary'}>Start</Button>\n                        </Grid>\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nimport Arena from './Arena';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 30,\n        flexGrow: 1,\n        alignContent: \"flex-start\",\n    },\n    title: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    },\n    fightZone: {\n        flexGrow: 1,\n        padding: 20,\n        height: \"80vh\"\n    }\n}));\n\nexport default function Fight() {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <Typography className={classes.title} align={'center'}>WELCOME TO THE DEATH ZONE</Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.fightZone}>\n                <Arena />\n            </Grid>\n        </Grid>\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n        justifyContent: \"space-around\"\n    },\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    feature: {\n        marginTop: 50,\n        flexGrow: 1\n    },\n    button: {\n        margin: \"0 30%\",\n        marginTop: 20,\n        marginBottom: 200,\n        fontSize: 30,\n        padding: \"20px 40px\"\n    }\n}));\n\nexport default function Landing() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={\"center\"}>WELCOME TO CHATBOT WARS</Typography>\n            <div className={classes.container}>\n                <Typography variant={'h6'}>\n                    Build your own chatbot. Watch it crash and burn.\n                </Typography >\n                <Button className={classes.button} size={'large'} variant={'contained'} color={'secondary'} component={RouterLink} to={'/workshop'}>Get Started</Button>\n            </div>\n        </React.Fragment>\n    );\n}\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport API from 'api';\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n    const auth = useProvideAuth();\n    return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n    return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n    // Start as true, and once no user is discovered, routes will be rerendered\n    const [user, setUser] = useState(true);\n\n    // Initial attempt to fetch jwt\n    useEffect(() => {\n        async function fetchData() {\n            let token = localStorage.getItem(\"jwt_token\");\n            if (token != null) {\n                try {\n                    let response = await API.get('/me');\n                    setUser(response.data);\n                } catch (error) {\n                    console.error(error);\n                }\n            } else {\n                setUser(false);\n            }\n        }\n\n        fetchData();\n    }, []);\n\n    const register = async (loginData) => {\n        try {\n            let response = await API.post('/users', loginData);\n            return response;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const login = async (username, password) => {\n        try {\n            let response = await API.post('/sessions', {\n                username,\n                password\n            });\n            // Save token in localstorage\n            localStorage.setItem(\"jwt_token\", response.data.token);\n            setUser(response.data.user);\n            return true;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    const logout = () => {\n        // Delete token from local storage\n        localStorage.removeItem(\"jwt_token\");\n        setUser(() => false);\n    };\n\n    // Return the user object and auth methods\n    return {\n        user,\n        register,\n        login,\n        logout,\n    };\n}","import { Button, Dialog, DialogActions, DialogTitle, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    confirmButton: {\n        backgroundColor: props => props.color,\n        '&:hover': {\n            backgroundColor: props => props.hoverColor\n        }\n    }\n}));\n\nexport default function ConfirmModal(props) {\n    const { onConfirm, prompt, confirmText, render } = props;\n    const classes = useStyles(props);\n\n    const [open, setOpen] = useState(false);\n\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            {render && render(handleOpen)}\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle >{prompt}</DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\", marginBottom: 10 }}>\n                    <Button autoFocus onClick={handleClose} variant=\"contained\" color=\"primary\">Cancel</Button>\n                    <Button\n                        onClick={handleConfirm}\n                        variant=\"contained\"\n                        className={classes.confirmButton} >{confirmText}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { AppBar, CssBaseline, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ExitToApp } from '@material-ui/icons';\nimport React from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\nimport ConfirmModal from './workshop/edit/ConfirmModal';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        backgroundColor: theme.palette.primary.dark\n    },\n    dividerColor: {\n        backgroundColor: theme.palette.primary.contrastText\n    },\n    appBarLeft: {\n        width: drawerWidth,\n        flexShrink: 1,\n        fontSize: 30,\n        fontWeight: 500,\n    },\n    appBarRight: {\n        textAlign: \"right\",\n        flexGrow: 1,\n        paddingRight: 20,\n        fontSize: 30,\n    },\n    loginLink: {\n        textDecoration: \"none\",\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    logoutContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-end\"\n    },\n    logoutButton: {\n        color: \"white\",\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    activeNav: {\n        fontWeight: \"bold\",\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main,\n        }\n    },\n    content: {\n        paddingTop: theme.layout.nav.appBarHeight,\n        flexGrow: 1,\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: 'column',\n        overflowX: \"hidden\"\n    },\n}));\n\nexport default function NavMenu({ routes, children }) {\n    const { user, logout } = useAuth();\n\n    const theme = useTheme();\n    const classes = useStyles();\n    const history = useHistory();\n\n    function signout() {\n        logout();\n        history.push(\"/\");\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar disableGutters className={classes.headerContainer}>\n                    <Typography className={classes.appBarLeft} variant=\"h4\" align={'center'} noWrap>\n                        Chatbot Wars\n                    </Typography>\n                    <div className={classes.appBarRight}>\n                        {user ?\n                            <div className={classes.logoutContainer}>\n                                <Typography variant=\"h5\" style={{ alignSelf: \"center\" }}>Hi, {user.username}</Typography>\n                                <ConfirmModal />\n\n                                <ConfirmModal\n                                    render={open => (\n                                        <IconButton onClick={open} className={classes.logoutButton}>\n                                            <ExitToApp />\n                                        </IconButton>\n                                    )}\n                                    onConfirm={signout}\n                                    prompt={\"Are you sure you want to log out?\"}\n                                    confirmText={\"Logout\"}\n                                    color={theme.palette.secondary.main}\n                                    hoverColor={theme.palette.secondary.dark}\n                                />\n\n                            </div>\n                            :\n                            <Typography component={NavLink} to={\"/login\"} variant=\"h5\" className={classes.loginLink}>Login</Typography>\n                        }\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        {Object.values(routes).map((route, index) => (\n                            route.icon && <ListItem\n                                button\n                                exact={route.exact || false}\n                                component={NavLink}\n                                activeClassName={classes.activeNav}\n                                to={route.path}\n                                key={index}>\n                                <ListItemIcon>\n                                    <route.icon />\n                                </ListItemIcon>\n                                <ListItemText primary={route.name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Drawer>\n            <main className={classes.content}>\n                {children}\n            </main>\n        </div >\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function Finalize() {\n    return (\n        <React.Fragment>\n            <Grid item container spacing={3} alignContent=\"space-around\" style={{ textAlign: \"center\", height: \"100%\" }}>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >That's a good start.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        You can keep working on your bot anytime by going back to the workshop.\n                </Typography>\n                </Grid>\n                <Grid item xs={12} >\n                    <Typography variant={'h6'} >\n                        Click 'To Glory' to send your bot to the battlefield!\n                </Typography>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { moods } from 'api';\n\nconst streamErrors = (msgs) => {\n    return msgs.join(\"\\n\");\n};\n\nexport default function LineInput({ autoFocus, error, errorMessages, label, line, updateLine }) {\n\n    const changeText = (event) => {\n        updateLine({ text: event.target.value });\n    };\n\n    const changeSelection = (event) => {\n        updateLine({ mood: event.target.value });\n    };\n\n\n    return (\n        <React.Fragment>\n            <Grid item xs={9}>\n                <FormControl fullWidth>\n                    <TextField autoFocus={autoFocus || false} value={line.text} error={error} helperText={streamErrors(errorMessages)} label={label} variant=\"outlined\" onChange={changeText} />\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} >\n                <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Mood</InputLabel>\n                    <Select\n                        variant={'outlined'}\n                        label=\"Mood\"\n                        onChange={changeSelection}\n                        value={line.mood}\n                    >\n                        {moods.map((mood, index) => {\n                            return (\n                                <MenuItem value={index} key={index}>{mood}</MenuItem>\n                            );\n                        })}\n                    </Select>\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Greeting must be non-empty\";\n\nexport default function Greetings({ value, updateHandler: updateGreetings, setValidator, titleStyle }) {\n    const [greeting, setGreeting] = useState(value[0]);\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n\n\n    const validate = useCallback(\n        () => {\n            let errorMessages = [];\n            const validGreeting = greeting.text.length > 0;\n            if (!validGreeting) {\n                setError(true);\n                errorMessages.push(badLength);\n            }\n            setErrorMsgs(errorMessages);\n            updateGreetings([greeting]);\n            return validGreeting;\n        },\n        [greeting, updateGreetings],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeGreeting = ({ text, mood }) => {\n        setGreeting({\n            text: text !== undefined ? text : greeting.text,\n            mood: mood !== undefined ? mood : greeting.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>What's your bot gonna say prior to embarassing your foes?</Typography>\n            </Grid>\n            <LineInput autoFocus error={error} errorMessages={errorMsgs} label=\"Greeting\" line={greeting} updateLine={changeGreeting} />\n        </React.Fragment>\n    );\n}\n","import { useEffect, useState } from \"react\";\n\n// Delay in milliseconds\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}","import { FormControl, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport API from 'api';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function Name({ value, updateHandler: updateName, setValidator, titleStyle }) {\n    const classes = useStyles();\n\n    const [name, setName] = useState(value);\n    const [error, setError] = useState(\"\");\n\n    const validate = useCallback(\n        async () => {\n            if (!validName(name)) {\n                setError(\"Name must be between 3 and 30 characters\");\n                return false;\n            }\n            // Check unique username\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setError(\"That bot name is taken\");\n                    return false;\n                } else {\n                    setError(\"\");\n                    updateName(name);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            return true;\n        },\n        [name, updateName],\n    );\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName) {\n                    setError(\"That bot name is taken\");\n                } else {\n                    setError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName]);\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setError(\"\");\n        setCheckedName(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>First thing's first, give your bot a name</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl fullWidth>\n                    <TextField\n                        autoFocus\n                        className={error.length === 0 && validName && checkedName ? classes.valid : null}\n                        error={error.length > 0}\n                        helperText={error.length === 0 && validName && checkedName ? \"Valid bot name\" : error}\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        value={name}\n                        onChange={changeName} />\n                </FormControl>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Question must be non-empty\";\n\nexport default function Questions({ value, updateHandler: updateQuestions, setValidator, titleStyle }) {\n    const [question1, setQuestion1] = useState(value[0]);\n    const [question2, setQuestion2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validQuestion1 = question1.text.length > 0;\n            const validQuestion2 = question2.text.length > 0;\n            if (!validQuestion1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validQuestion2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateQuestions([question1, question2]);\n            return validQuestion1 && validQuestion2;\n        },\n        [question1, question2, updateQuestions],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeQuestion1 = ({ text, mood }) => {\n        setQuestion1({\n            text: text !== undefined ? text : question1.text,\n            mood: mood !== undefined ? mood : question1.mood\n        });\n    };\n\n    const changeQuestion2 = ({ text, mood }) => {\n        setQuestion2({\n            text: text !== undefined ? text : question2.text,\n            mood: mood !== undefined ? mood : question2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Everyone needs a conversation starter</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Question 1\" error={error1} errorMessages={errorMsgs1} line={question1} updateLine={changeQuestion1} />\n            <LineInput label=\"Question 2\" error={error2} errorMessages={errorMsgs2} line={question2} updateLine={changeQuestion2} />\n        </React.Fragment>\n    );\n}\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport LineInput from './LineInput';\n\nconst badLength = \"Response must be non-empty\";\n\nexport default function Responses({ value, updateHandler: updateResponses, setValidator, titleStyle }) {\n    const [response1, setResponse1] = useState(value[0]);\n    const [response2, setResponse2] = useState(value[1]);\n    const [error1, setError1] = useState(false);\n    const [error2, setError2] = useState(false);\n    const [errorMsgs1, setErrorMsgs1] = useState([]);\n    const [errorMsgs2, setErrorMsgs2] = useState([]);\n\n    const validate = useCallback(\n        () => {\n            setError1(false);\n            setError2(false);\n            let errorMessages1 = [];\n            let errorMessages2 = [];\n\n            const validResponse1 = response1.text.length > 0;\n            const validResponse2 = response2.text.length > 0;\n            if (!validResponse1) {\n                errorMessages1.push(badLength);\n                setError1(true);\n            }\n            if (!validResponse2) {\n                errorMessages2.push(badLength);\n                setError2(true);\n            }\n            setErrorMsgs1(errorMessages1);\n            setErrorMsgs2(errorMessages2);\n            updateResponses([response1, response2]);\n            return validResponse1 && validResponse2;\n        },\n        [response1, response2, updateResponses],\n    );\n\n    useEffect(() => {\n        setValidator(validate);\n    }, [setValidator, validate]);\n\n    const changeResponse1 = ({ text, mood }) => {\n        setResponse1({\n            text: text !== undefined ? text : response1.text,\n            mood: mood !== undefined ? mood : response1.mood\n        });\n    };\n\n    const changeResponse2 = ({ text, mood }) => {\n        setResponse2({\n            text: text !== undefined ? text : response2.text,\n            mood: mood !== undefined ? mood : response2.mood\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} style={titleStyle}>\n                <Typography variant={'h5'} align={'center'}>Time for some trash talk</Typography>\n            </Grid>\n            <LineInput autoFocus label=\"Response 1\" error={error1} errorMessages={errorMsgs1} line={response1} updateLine={changeResponse1} />\n            <LineInput label=\"Response 2\" error={error2} errorMessages={errorMsgs2} line={response2} updateLine={changeResponse2} />\n        </React.Fragment>\n    );\n}\n","import { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'api';\nimport Finalize from 'components/workshop/create/Finalize';\nimport Greetings from 'components/workshop/create/Greetings';\nimport Name from 'components/workshop/create/Name';\nimport Questions from 'components/workshop/create/Questions';\nimport Responses from 'components/workshop/create/Responses';\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: \"flex\",\n        flexDirection: 'column',\n        padding: 20\n    },\n    activeStep: {\n        color: theme.palette.success.light\n    },\n    stepContainer: {\n        padding: 20,\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n    stepContent: {\n        flexGrow: 1,\n        padding: \"0 !important\",\n        alignContent: \"flex-start\"\n    },\n    stepButton: {\n        alignSelf: \"flex-end\",\n        textAlign: \"center\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n    }\n}));\n\n\nexport default function Create() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [completed, setCompleted] = useState(new Set());\n\n    const allStepsCompleted = () => {\n        return completed.size === steps.length;\n    };\n\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        // Check for allowing user to directly advance this far\n        if (completed.has(step)) {\n            setActiveStep(step);\n        }\n    };\n\n    const handleComplete = async () => {\n        const newCompleted = new Set(completed);\n        // Call child validation method\n        let valid = await steps[activeStep].validate();\n        if (!valid) {\n            newCompleted.delete(activeStep);\n            setCompleted(newCompleted);\n            return;\n        }\n\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        if (completed.size !== steps.length) {\n            handleNext();\n        }\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    const lastStep = () => {\n        return activeStep === steps.length - 1;\n    };\n\n    const [botID, setBotID] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [greetings, setGreetings] = useState([\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [questions, setQuestions] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n    const [responses, setResponses] = useState([\n        {\n            text: \"\",\n            mood: 0\n        },\n        {\n            text: \"\",\n            mood: 0\n        }\n    ]);\n\n    const steps = [\n        {\n            title: \"Name\",\n            component: Name,\n            value: name,\n            handler: setName\n        },\n        {\n            title: \"Greetings\",\n            component: Greetings,\n            value: greetings,\n            handler: setGreetings\n        },\n        {\n            title: \"Questions\",\n            component: Questions,\n            value: questions,\n            handler: setQuestions\n        },\n        {\n            title: \"Responses\",\n            component: Responses,\n            value: responses,\n            handler: setResponses\n        },\n        {\n            title: \"Finalize\",\n            component: Finalize,\n            value: name,\n            handler: null,\n            validate: () => true\n        },\n    ];\n\n    const createBot = async () => {\n        const bot = {\n            name: name,\n            greetings: greetings,\n            questions: questions,\n            responses: responses,\n        };\n        console.log(bot);\n\n        let response = await API.post('/bots', bot);\n        // Should log ID here\n        setBotID(response.data.id);\n        console.log(JSON.stringify(response.data));\n    };\n\n\n    return (\n        <div className={classes.root}>\n            {!allStepsCompleted() && (<Stepper alternativeLabel nonLinear activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    return (\n                        <Step active={activeStep === index} key={step.title} {...stepProps}>\n                            <StepButton\n                                disabled={activeStep !== index && !isStepComplete(index)}\n                                onClick={handleStep(index)}\n                                completed={activeStep !== index && isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {step.title}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>)}\n            <Grid container direction={'row'} spacing={3} className={classes.stepContainer}>\n                {allStepsCompleted() ? (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant={'h4'}>\n                                Bot created successfully!\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button to={`/workshop/edit/${botID}`} component={RouterLink} variant={'contained'} color={'secondary'}>See it in the workshop</Button>\n                        </Grid>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <Grid container spacing={3} item xs={12} className={classes.stepContent}>\n                            {React.createElement(\n                                steps[activeStep].component,\n                                {\n                                    value: steps[activeStep].value,\n                                    updateHandler: steps[activeStep].handler,\n                                    setValidator: (validator => steps[activeStep].validate = validator),\n                                    titleStyle: { padding: \"30px 0px\" }\n                                },\n                            )}\n                        </Grid>\n                        <Grid item xs={12} className={classes.stepButton}>\n                            <Button disabled={activeStep === 0} onClick={handleBack} size=\"large\" variant=\"contained\" color=\"secondary\">Back</Button>\n                            {!lastStep() ?\n                                (\n                                    < Button onClick={handleComplete} size=\"large\" variant=\"contained\" color=\"secondary\">Next</Button>\n                                ) : (\n                                    < Button onClick={() => { createBot(); handleComplete(); }} size=\"large\" variant=\"contained\" color=\"secondary\">To Glory</Button>\n                                )\n                            }\n                        </Grid>\n                    </React.Fragment>\n                )}\n            </Grid>\n        </div >\n    );\n}\n","import { Button, CircularProgress, Grid, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport API from 'api';\nimport ConfirmModal from './edit/ConfirmModal';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        flexGrow: 1,\n    },\n    botsContainer: {\n        paddingTop: 20,\n        alignContent: \"flex-start\"\n    },\n    noBots: {\n        marginTop: \"20%\",\n        marginBottom: 20\n    },\n    tableContainer: {\n        padding: 20\n    },\n    selectBot: {\n        textDecoration: \"none\",\n        color: \"black\",\n        cursor: \"pointer\",\n        '&:hover': {\n            color: \"green\"\n        }\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n    loadingContainer: {\n        alignContent: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n}));\n\n\nexport default function Edit() {\n    const classes = useStyles();\n    const history = useHistory();\n\n\n    const [loading, setLoading] = useState(true);\n    const [bots, setBots] = useState([]);\n\n\n    // Fetch bot data\n    const getBots = useCallback(\n        async () => {\n            let response = await API.get('/users/bots');\n            setBots(response.data);\n            setLoading(false);\n        },\n        [],\n    );\n\n    const selectBot = (id) => {\n        history.push(`/workshop/edit/${id}`);\n    };\n\n    useEffect(() => {\n        getBots();\n    }, [getBots]);\n\n\n    const deleteBot = async (id) => {\n        await API.delete(`/bots/${id}`);\n        getBots();\n    };\n\n    return (\n        <Grid container className={classes.container}>\n            {loading ? (\n                <Grid item xs={12} className={classes.loading}>\n                    <CircularProgress color=\"secondary\" />\n                </Grid >\n            ) : (\n                <Grid container item xs={12} className={classes.botsContainer}>\n                    {bots.length > 0 ? (\n                        <React.Fragment>\n                            <Grid item xs={12} >\n                                <Typography variant={'h5'} align={'center'}>Select a bot to edit</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.tableContainer}>\n                                <TableContainer component={Paper} >\n                                    <Table stickyHeader>\n                                        <colgroup>\n                                            <col style={{ width: '80%' }} />\n                                            <col style={{ width: '20%' }} />\n                                        </colgroup>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell align={'center'}>Delete</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {bots.map((bot, index) => (\n                                                <TableRow key={index} hover>\n                                                    <TableCell className={classes.selectBot} onClick={() => { selectBot(bot.id); }} align={'left'}>\n                                                        {bot.name}\n                                                    </TableCell>\n                                                    <TableCell align={'center'}>\n                                                        <ConfirmModal\n                                                            render={open => (\n                                                                <IconButton onClick={open} className={classes.delete}>\n                                                                    <DeleteIcon />\n                                                                </IconButton>\n                                                            )}\n                                                            onConfirm={() => deleteBot(bot.id)}\n                                                            prompt={\"Are you sure you want to delete this bot?\"}\n                                                            confirmText={\"Delete\"}\n                                                            color={\"red\"}\n                                                            hoverColor={\"darkred\"}\n                                                        />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.noBots}>\n                                <Typography variant={'h4'} align={'center'}>You haven't created any bots</Typography>\n                            </Grid>\n                            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                <Button component={RouterLink} to={\"/workshop/create\"} variant={'contained'} color={'secondary'}>Create a bot</Button>\n                            </Grid>\n                        </React.Fragment>\n                    )\n                    }\n                </Grid>\n            )}\n        </Grid >\n    );\n}\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: 40,\n        fontWeight: 'bolder',\n        marginTop: 30,\n        marginBottom: 50,\n    },\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        textAlign: \"center\",\n    },\n    directionText: {\n        fontSize: 24,\n        padding: 20\n    },\n    button: {\n        fontSize: 20,\n        margin: \"auto\",\n        width: \"50%\"\n    }\n}));\n\nexport default function Entrance() {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Typography className={classes.title} align={'center'}>WELCOME TO THE WORKSHOP</Typography>\n            <div className={classes.container}>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Start off by creating a bot\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/create'} size=\"large\" variant=\"contained\" color=\"secondary\">Create</Button>\n                </div>\n                <div>\n                    <Typography className={classes.directionText} align={'center'}>Or keep working on existing ones\n                </Typography>\n                    <Button className={classes.button} component={RouterLink} to={'/workshop/edit'} size=\"large\" variant=\"contained\" color=\"secondary\">Edit</Button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n","import { Button, Dialog, DialogActions, DialogTitle, Grid, IconButton, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport API, { moods } from 'api';\nimport React, { useState } from 'react';\nimport LineInput from '../create/LineInput';\nimport ConfirmModal from './ConfirmModal';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"70%\"\n    },\n    row: {\n        overflowWrap: 'break-word'\n    },\n    delete: {\n        '&:hover': {\n            color: \"red\"\n        }\n    },\n}));\n\nconst badLength = \"Question must be non-empty\";\n\n\nexport default function LineTable({ botID, lineType, lines, min, refresh }) {\n    const classes = useStyles();\n    const [line, setLine] = useState({\n        text: \"\",\n        mood: 0\n    });\n    const [error, setError] = useState(false);\n    const [errorMsgs, setErrorMsgs] = useState([]);\n    const [open, setOpen] = useState(false);\n\n\n    const changeLine = ({ text, mood }) => {\n        setLine({\n            text: text !== undefined ? text : line.text,\n            mood: mood !== undefined ? mood : line.mood\n        });\n    };\n\n    const clearInputs = () => {\n        setLine({\n            text: \"\",\n            mood: 0\n        });\n    };\n\n    const validate = () => {\n        setError(false);\n        let errorMessages = [];\n\n        const validText = line.text.length > 0;\n        if (!validText) {\n            errorMessages.push(badLength);\n            setError(true);\n        }\n        setErrorMsgs(errorMessages);\n\n        if (!validText)\n            return;\n        addLine();\n    };\n\n    const addLine = async () => {\n        try {\n            await API.post(`/bots/${botID}/${lineType}`, line);\n            refresh();\n            clearInputs();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const deleteLine = async (index) => {\n        if (lines.length <= min) {\n            setOpen(true);\n            return;\n        }\n        await API.delete(`/bots/${botID}/${lineType}/${index}`);\n        refresh();\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog onClose={() => setOpen(false)} open={open}>\n                <DialogTitle>\n                    Must have at least {min} {lineType}\n                </DialogTitle>\n                <DialogActions style={{ justifyContent: \"center\" }}>\n                    <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">OK</Button>\n                </DialogActions>\n            </Dialog>\n            <Grid item xs={12} className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table stickyHeader>\n                        <colgroup>\n                            <col style={{ width: '80%' }} />\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align={'center'}>\n                                    Text\n                        </TableCell>\n                                <TableCell align={'center'}>\n                                    Mood\n                            </TableCell>\n                                <TableCell align={'center'}>\n                                    Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {lines.map((line, index) => (\n                                <TableRow hover key={index} className={classes.row}>\n                                    <TableCell align={'left'}>\n                                        {line.text}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        {moods[line.mood]}\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <ConfirmModal\n                                            render={open => (\n                                                <IconButton onClick={open} className={classes.delete}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            )}\n                                            onConfirm={() => deleteLine(index)}\n                                            prompt={\"Are you sure you want to delete this line?\"}\n                                            confirmText={\"Delete\"}\n                                            color={\"red\"}\n                                            hoverColor={\"darkred\"}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid container spacing={3} item xs={12}>\n                <LineInput label={`Add ${lineType.substr(0, -1)}`} error={error} errorMessages={errorMsgs} line={line} updateLine={changeLine} />\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Button onClick={validate} fullWidth size={\"large\"} variant={'contained'} color={'secondary'}>Add</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import { AppBar, Button, CircularProgress, FormControl, Grid, List, ListItem, ListItemText, makeStyles, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'api';\nimport LineTable from './LineTable';\nimport useDebounce from 'hooks/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    name: {\n        fontSize: 30,\n        fontWeight: 600,\n        textAlign: \"center\",\n        padding: 5.5\n    },\n    tabContainer: {\n        padding: 20,\n        height: \"100%\",\n        flexGrow: 1\n    },\n    generalContainer: {\n        paddingTop: 30,\n        textAlign: \"center\",\n        flexGrow: 1,\n        alignContent: \"flex-start\"\n    },\n    generalSave: {\n        alignSelf: \"flex-end\",\n    },\n    errorList: {\n        textAlign: \"center\",\n        color: \"red\"\n    },\n    loading: {\n        display: \"flex\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        flexGrow: 1\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nfunction validName(name) {\n    return name.length >= 3 && name.length <= 30;\n}\n\nexport default function BotDetail() {\n    const classes = useStyles();\n    const { id } = useParams();\n\n    const [loading, setLoading] = useState(true);\n    const [tab, setTab] = React.useState(0);\n    const [bot, setBot] = useState({});\n    const [name, setName] = useState(\"\");\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [error, setError] = useState(false);\n\n    // General config\n    const [nameError, setNameError] = useState(\"\");\n\n    const validate = async () => {\n        let errorMsgs = [];\n\n        const validGreetings = bot.greetings.length >= 1;\n        const validQuestions = bot.questions.length >= 2;\n        const validResponses = bot.responses.length >= 2;\n        if (!validName(name)) {\n            setNameError(\"Name must be between 3 and 30 characters\");\n            errorMsgs.push(\"Name must be between 3 and 30 characters\");\n        }\n        if (!validGreetings) {\n            errorMsgs.push(\"Must have at least 1 greeting\");\n        }\n        if (!validQuestions) {\n            errorMsgs.push(\"Must have at least 2 questions\");\n        }\n        if (!validResponses) {\n            errorMsgs.push(\"Must have at least 2 responses\");\n        }\n\n        if (!validName(name) || !validGreetings || !validQuestions || !validResponses) {\n            setErrorMessages(errorMsgs);\n            setError(true);\n            return;\n        }\n\n        if (bot.name !== name) {\n            try {\n                let response = await API.get(`/unique/bots/${name}`);\n                if (!response.data.valid) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                    updateBot();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        } else {\n            setNameError(\"That's the same name!\");\n        }\n    };\n\n    const [checkedName, setCheckedName] = useState(false);\n    const debouncedName = useDebounce(name, 400);\n\n    // Check unique bot name\n    useEffect(() => {\n        async function checkBotName(currentName) {\n            if (!validName(currentName)) {\n                setNameError(\"\");\n                return;\n            }\n            try {\n                let response = await API.get(`/unique/bots/${currentName}`);\n                if (!response.data.valid && currentName === debouncedName && currentName !== bot.name) {\n                    setNameError(\"That bot name is taken\");\n                } else {\n                    setNameError(\"\");\n                }\n                setCheckedName(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkBotName(debouncedName);\n    }, [debouncedName, bot.name]);\n\n    const changeName = (event) => {\n        setName(event.target.value);\n        setNameError(\"\");\n        setCheckedName(false);\n    };\n\n    // Fetch bot data\n    const getBotData = useCallback(\n        async () => {\n            let response = await API.get(`/bots/${id}`);\n            setBot(response.data);\n            setName(response.data.name);\n            setLoading(false);\n        },\n        [id],\n    );\n\n    // Fetch bot data\n    const updateBot = async () => {\n        await API.put(`/bots/${id}`, {\n            ...bot,\n            name: name\n        }\n        );\n        getBotData();\n    };\n\n    // Initial load\n    useEffect(() => {\n        getBotData();\n    }, [getBotData]);\n\n    // Tab switching\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n    const showValidName = checkedName && nameError.length === 0 && validName(name) && name !== bot.name;\n\n    return (\n        <React.Fragment>\n            {loading ? (\n                <Grid container style={{ flexGrow: 1 }}>\n                    <Grid item xs={12} className={classes.loading}>\n                        <CircularProgress color=\"secondary\" />\n                    </Grid >\n                </Grid >\n            ) : (\n                <React.Fragment>\n                    <Typography className={classes.name}>\n                        {bot.name}\n                    </Typography>\n                    <AppBar position=\"static\">\n                        <Tabs value={tab} onChange={handleChange} variant={'fullWidth'}>\n                            <Tab label=\"General\" />\n                            <Tab label=\"Greetings\" />\n                            <Tab label=\"Questions\" />\n                            <Tab label=\"Responses\" />\n                        </Tabs>\n                    </AppBar>\n                    <React.Fragment>\n                        <TabPanel value={tab} index={0} className={classes.general}>\n                            <Grid container spacing={3} item xs={12} className={classes.generalContainer}>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth>\n                                        <TextField\n                                            autoFocus\n                                            className={showValidName ? classes.valid : null}\n                                            error={nameError.length > 0}\n                                            helperText={showValidName ? \"Valid bot name\" : nameError}\n                                            label=\"Name\"\n                                            variant=\"outlined\"\n                                            value={name}\n                                            onChange={changeName} />\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                            {error && (\n                                <Grid item xs={12} className={classes.errorList}>\n                                    <List subheader={\"Please fix the following errors\"}>\n                                        {errorMessages.map((msg, index) => (\n                                            <ListItem key={index}>\n                                                <ListItemText primary={msg} className={classes.errorList} />\n                                            </ListItem>\n                                        ))}\n                                    </List>\n                                </Grid>\n                            )}\n                            <Grid item xs={12} className={classes.generalSave}>\n                                <Button onClick={validate} fullWidth size={'large'} variant={'contained'} color={'secondary'}>Save</Button>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={tab} index={1}>\n                            <LineTable botID={bot.id} lineType={\"greetings\"} lines={bot.greetings} min={1} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={2}>\n                            <LineTable botID={bot.id} lineType={\"questions\"} lines={bot.questions} min={2} refresh={getBotData} />\n                        </TabPanel>\n                        <TabPanel value={tab} index={3}>\n                            <LineTable botID={bot.id} lineType={\"responses\"} lines={bot.responses} min={2} refresh={getBotData} />\n                        </TabPanel>\n                    </React.Fragment>\n                </React.Fragment>\n            )\n            } </React.Fragment>\n    );\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            style={{ height: \"100%\" }}\n            {...other}\n        >\n            {value === index && (\n                <Grid container className={classes.tabContainer}>\n                    {children}\n                </Grid>\n            )}\n        </div>\n    );\n}","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Lock, Person } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport { useAuth } from 'hooks/auth';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: 500,\n        margin: \"auto\",\n        padding: 20,\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    icon: {\n        alignSelf: \"center\",\n        fontSize: 44,\n        paddingRight: 10\n    },\n    failed: {\n        color: \"red\",\n        fontSize: 16,\n        padding: 0\n    }\n}));\n\nexport default function Login() {\n    const classes = useStyles();\n    const { login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [failed, setFailed] = useState(false);\n\n\n    const validate = async () => {\n        let newErrors = {\n            username: \"\",\n            password: \"\",\n        };\n        let valid = true;\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryLogin();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryLogin() {\n        try {\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            setFailed(true);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Login to edit your bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        {failed && <Grid item xs={12} className={classes.failed}>\n                            <Typography align={'center'}>Invalid username or password</Typography>\n                        </Grid>}\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Person className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.username.length === 0 && errors.username.length > 0}\n                                helperText={state.username.length === 0 ? errors.username : \"\"}\n                                onChange={event => setState({ ...state, username: event.target.value })}\n                                label=\"Username\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\" }}>\n                            <Lock className={classes.icon} color={\"action\"} />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\"\n                                style={{ flexGrow: 1 }}\n\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\" style={{}}>Log In</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Not registered? <RouterLink to={\"/register\"} className={classes.link}>Click here to create an account</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { Link as RouterLink, useHistory, useLocation } from 'react-router-dom';\nimport API from 'api';\nimport { useAuth } from 'hooks/auth';\nimport useDebounce from 'hooks/debounce';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        paddingTop: 60,\n        paddingBottom: 50,\n        fontSize: 36\n    },\n    formContainer: {\n        width: 600,\n        margin: \"auto\",\n        padding: 20\n    },\n    formRow: {\n        display: \"flex\",\n        justifyContent: \"space-around\"\n    },\n    bottomText: {\n        marginTop: -10,\n        textAlign: \"center\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.info.main,\n        \"&:hover\": {\n            color: theme.palette.secondary.main\n        }\n    },\n    valid: {\n        '& label.MuiInputLabel-formControl': {\n            color: 'green',\n        },\n        '& p.MuiFormHelperText-root': {\n            color: 'green',\n        },\n        '& input + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:focus + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n        '& input:valid:hover + fieldset': {\n            borderColor: 'green',\n            borderWidth: 2,\n        },\n    },\n}));\n\nexport default function Register() {\n    const classes = useStyles();\n    const { register, login } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n\n    const [state, setState] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        password: \"\",\n    });\n\n    const [checkedUsername, setCheckedUsername] = useState(false);\n    const debouncedUsername = useDebounce(state.username, 400);\n\n    // Check unique username\n    useEffect(() => {\n        async function checkUsername(username) {\n            if (username.length === 0)\n                return;\n            try {\n                let response = await API.get(`/unique/users/${username}`);\n                if (!response.data.valid && username === debouncedUsername) {\n                    setErrors(errors => {\n                        return { ...errors, username: \"That username is taken\" };\n                    });\n                } else {\n                    setErrors(errors => {\n                        return { ...errors, username: \"\" };\n                    });\n                }\n                setCheckedUsername(true);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        checkUsername(debouncedUsername);\n    }, [debouncedUsername]);\n\n\n    function validate() {\n        let newErrors = {\n            firstName: \"\",\n            lastName: \"\",\n            username: errors.username,\n            password: \"\",\n        };\n        let valid = true;\n        if (state.firstName.length === 0) {\n            newErrors.firstName = \"First name must not be empty\";\n            valid = false;\n        }\n        if (state.lastName.length === 0) {\n            newErrors.lastName = \"Last name must not be empty\";\n            valid = false;\n        }\n        if (state.username.length === 0) {\n            newErrors.username = \"Username must not be empty\";\n            valid = false;\n        }\n        if (state.password.length === 0) {\n            newErrors.password = \"Password must not be empty\";\n            valid = false;\n        }\n        if (valid) {\n            tryRegister();\n        }\n        setErrors(() => newErrors);\n    };\n\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    async function tryRegister() {\n        try {\n            await register(state);\n            await login(state.username, state.password);\n            // Nav to home page\n            history.replace(from);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n            <Grid container direction={'row'} style={{ margin: 0 }}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} align={'center'}>Register to create your own bots</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={4} component={Paper} className={classes.formContainer} elevation={6}>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                error={state.firstName.length === 0 && errors.firstName.length > 0}\n                                helperText={state.firstName.length === 0 ? errors.firstName : \"\"}\n                                onChange={event => setState({ ...state, firstName: event.target.value })}\n                                label=\"First Name\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.lastName.length === 0 && errors.lastName.length > 0}\n                                helperText={state.lastName.length === 0 ? errors.lastName : \"\"}\n                                onChange={event => setState({ ...state, lastName: event.target.value })}\n                                label=\"Last Name\" variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formRow}>\n                            <TextField\n                                className={errors.username.length === 0 && state.username.length > 0 && checkedUsername ? classes.valid : null}\n                                error={errors.username.length > 0}\n                                helperText={errors.username.length === 0 && state.username.length !== 0 && checkedUsername ? \"Valid username\" : errors.username}\n                                onChange={event => {\n                                    setState({ ...state, username: event.target.value });\n                                    setErrors({ ...errors, username: \"\" });\n                                    setCheckedUsername(false);\n                                }}\n                                label=\"Username\"\n                                variant=\"outlined\" />\n                            <TextField\n                                error={state.password.length === 0 && errors.password.length > 0}\n                                helperText={state.password.length === 0 ? errors.password : \"\"}\n                                onChange={event => setState({ ...state, password: event.target.value })}\n                                type={\"password\"}\n                                label=\"Password\"\n                                variant=\"outlined\" />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button onClick={validate} fullWidth variant=\"contained\" color=\"secondary\">Register</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <p className={classes.bottomText}>Already a user? <RouterLink to={\"/login\"} className={classes.link}>Click here to login</RouterLink></p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment >\n    );\n}\n","import Workshop from 'components/workshop/Workshop';\nimport Fight from 'components/fight/Fight';\nimport Home from \"components/Home\";\nimport NavMenu from 'components/NavMenu';\nimport React from \"react\";\nimport {\n    HashRouter as Router,\n    Redirect,\n    Route, Switch\n} from \"react-router-dom\";\nimport { Home as HomeIcon, Build, Forum } from '@material-ui/icons';\nimport Create from 'components/workshop/Create';\nimport Edit from 'components/workshop/Edit';\nimport Entrance from 'components/workshop/Entrance';\nimport BotDetail from 'components/workshop/edit/BotDetail';\nimport Login from 'components/auth/Login';\nimport Register from 'components/auth/Register';\nimport { useAuth } from 'hooks/auth';\n\n\nexport const routes = {\n    \"/\": {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        exact: true,\n        icon: HomeIcon\n    },\n    \"/workshop\": {\n        name: \"Workshop\",\n        path: \"/workshop\",\n        component: Workshop,\n        icon: Build,\n        routes: [\n            {\n                path: \"/\",\n                component: Entrance,\n                auth: false\n            },\n            {\n                path: \"/create\",\n                component: Create,\n                auth: true\n            },\n            {\n                path: \"/edit\",\n                component: Edit,\n                auth: true\n            },\n            {\n                path: \"/edit/:id\",\n                component: BotDetail,\n                auth: true\n            }\n        ]\n    },\n    \"/fight\": {\n        name: \"Fight\",\n        path: \"/fight\",\n        component: Fight,\n        icon: Forum\n    },\n    \"/login\": {\n        name: \"Login\",\n        path: \"/login\",\n        component: Login,\n        noAuth: true\n    },\n    \"/register\": {\n        name: \"Register\",\n        path: \"/register\",\n        component: Register,\n        noAuth: true\n    }\n};\n\nexport default function App() {\n    return (\n        <Router>\n            <NavMenu routes={routes}>\n                <Switch>\n                    {Object.values(routes).map((route, i) => {\n                        if (route.auth) {\n                            return (\n                                <PrivateRoute exact={route.exact || false} path={route.path} key={i}>\n                                    <route.component routes={route.routes} />\n                                </PrivateRoute>\n                            );\n                        } else {\n                            if (route.noAuth) {\n                                return (\n                                    <NoAuthRoute exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </NoAuthRoute>\n                                );\n                            } else {\n                                return (\n                                    <Route exact={route.exact || false} path={route.path} key={i}>\n                                        <route.component routes={route.routes} />\n                                    </Route>\n                                );\n                            }\n                        }\n                    })}\n                    <Route path=\"*\"\n                        render={({ location }) =>\n                            <Redirect\n                                to={{\n                                    pathname: \"/\",\n                                    state: { from: location }\n                                }}\n                            />\n                        }\n                    />\n                </Switch>\n            </NavMenu>\n        </Router>\n    );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nexport function PrivateRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\n// Only available if not logged in (login/register)\nexport function NoAuthRoute({ children, ...rest }) {\n    const { user } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    <Redirect\n                        to={{\n                            pathname: \"/\",\n                        }}\n                    />\n                ) : (\n                    children\n                )\n            }\n        />\n    );\n}","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { PrivateRoute } from 'router/Router';\n\n\nexport default function Workshop({ routes }) {\n    const { path } = useRouteMatch();\n\n    return (\n        <React.Fragment>\n            <Switch>\n                {routes.map((route, i) => {\n                    if (route.auth) {\n                        return (\n                            <PrivateRoute exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </PrivateRoute>\n                        );\n                    } else {\n                        return (\n                            <Route exact path={`${path}${route.path}`} key={i}>\n                                <route.component />\n                            </Route>\n                        );\n                    }\n                })}\n            </Switch>\n        </React.Fragment>\n    );\n}\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { brown, amber } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: brown[300],\n            main: brown[600],\n            dark: brown[900],\n            contrastText: '#fff',\n        },\n        secondary: {\n            light: amber[500],\n            main: amber[600],\n            dark: amber[800],\n            contrastText: '#000',\n        },\n    },\n    layout: {\n        nav: {\n            appBarHeight: 64\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport Router from 'router/Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'theme';\nimport { ProvideAuth } from \"hooks/auth\";\n\n\nexport default function App() {\n    return (\n        <ProvideAuth>\n            <ThemeProvider theme={theme}>\n                <Router />\n            </ThemeProvider>\n        </ProvideAuth>\n\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}